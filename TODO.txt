

WINDOW DI DIALOGO:
- davanti alle tile delle persone in gabbia
- all' uscita dello stage2
- all' ingresso dello stageBoss
- a boss sconfitto

SOUND EFFECT DI 1UP
SOUND EFFECT DI SHIELD
SOUND EFFECT DI EXIT SENZA TOOL


DA IMPLEMENTARE
CHECKPOINT DI SALVATAGGIO

RIUSCIRÃ² MAI A METTERE MONETE COME TILE DI BACKGROUND E 
SOSTITUIRLE CON BLANK QUANDO CI VADO SOPRA ?







DISCORD MARKDOWN:

SpritePlayer.c
```c
SetSpriteAnim(THIS, anim_shoot, 16u);
	struct Sprite* arrow_sprite = SpriteManagerAdd(SpriteArrow, 0, 0);
	arrow_sprite->flags = THIS->flags;
	arrow_sprite->x = THIS->x;
	arrow_sprite->x += 4;
	arrow_sprite->y = THIS->y;
	//DECIDE THE TYPE OF ARROW accordinG TO THE AMULET EQUIPED
	struct ArrowInfo* arrow_data = (struct ArrowInfo*)arrow_sprite->custom_data;
	if (archer_data->amulet){arrow_data->type = archer_data->amulet;}
	else{arrow_data->type = 1;}
	//ARROWDIR IS AN ATTRIBUTE INSIDE CUSTOM_DATA OF THE ARROW SPRITE
	//WHICH DETERMINES THE DIRECTION OF THE ARROW
	//1 HORIZONTAL, 2 DIAGONAL, 3 VERTICAL UP, 4 VERTICAL DOWN
	if (KEY_PRESSED(J_DOWN)){
		arrow_data->arrowdir = 4; // verticale in giu
		arrow_sprite->y += 8;
	}else{
		if (KEY_PRESSED(J_UP)){ //diagonale
			arrow_data->arrowdir = 2;
		}else{
			if(aimc < 16){ //orizzontale
				arrow_data->arrowdir = 1;
			}	
		}
		if (aimc == 16){ // verticale in su
			arrow_data->arrowdir = 3;
			arrow_sprite->y -= 4;
		}
	}
	shoot_cooldown = 4;// NUMBER OF FRAMES i DON'T WANT AN ARROW TO BE THROWN FROM NOW ON
	aimc = 0; 
	//AIMC = 0 MEANS SHOOTING HORIZONTAL
	//AIMC >0  AND < 16 MEANS DIAGONAL
	//AIMB = 16 MEANS VERTICAL
	
```

SpritePlayer.c
```c
	set_bkg_tiles(25*8, 12*8, 1, 1, tiles.data->data+3u);
```


#include "..\res\src\tiles.h"
...
set_bkg_tiles(THIS->x, THIS->y, 1, 1, tiles.data->data+3u);


tiles.h
```c
extern struct TilesInfo tiles;
```

TilesInfo.h
```c

struct TilesInfoInternal {
	unsigned char width;
	unsigned char height;
	unsigned char num_frames;
	unsigned char* data; // HERE IT IS !!
	unsigned char* color_data; 
};

struct TilesInfo {
	unsigned char bank;
	struct TilesInfoInternal const* data;
};

```

Now the declaration of the method I want to call:
```c
/** Sets the tiles in the background tile table.
    Starting at position x,y in tiles and writing across for w tiles
    and down for h tiles. Taking the values starting from the pointer
    data.
    @param data		Pointer to an unsigned char. Usually the 
    			first element in an array. // HERE IT IS !!
*/
void
set_bkg_tiles(UINT8 x,
	      UINT8 y,
	      UINT8 w,
	      UINT8 h,
	      unsigned char *tiles) NONBANKED; // HERE IT IS !!
```