                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 4.0.0 #11528 (MINGW32)
                              4 ;--------------------------------------------------------
                              5 	.module SpritePlayer
                              6 	.optsdcc -mgbz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _Destroy_SpritePlayer
                             12 	.globl _Update_SpritePlayer
                             13 	.globl _Start_SpritePlayer
                             14 	.globl _PlayFx
                             15 	.globl _SpriteManagerRemoveSprite
                             16 	.globl _SpriteManagerAdd
                             17 	.globl _SetState
                             18 	.globl _CheckCollision
                             19 	.globl _TranslateSprite
                             20 	.globl _SetSpriteAnim
                             21 	.globl _empty
                             22 	.globl _bank_SpritePlayer
                             23 	.globl _archer_data
                             24 	.globl _hit_cooldown
                             25 	.globl _aimc
                             26 	.globl _tile_collision
                             27 	.globl _archer_accel_y
                             28 	.globl _princess_parent
                             29 	.globl _death_cooldown
                             30 	.globl _platform_vx
                             31 	.globl _jump_power
                             32 	.globl _shoot_cooldown
                             33 	.globl _attack_wait
                             34 	.globl _damage_cooldown
                             35 	.globl _anim_flying
                             36 	.globl _anim_shoot
                             37 	.globl _anim_hit
                             38 	.globl _anim_shield
                             39 	.globl _anim_walk
                             40 	.globl _anim_dead
                             41 	.globl _anim_up
                             42 	.globl _anim_jump_up
                             43 	.globl _anim_jump
                             44 	.globl _anim_idle
                             45 	.globl _Die
                             46 	.globl _Shoot
                             47 	.globl _Jump
                             48 	.globl _MoveArcher
                             49 	.globl _CheckCollisionTile
                             50 	.globl _Hit
                             51 ;--------------------------------------------------------
                             52 ; special function registers
                             53 ;--------------------------------------------------------
                             54 ;--------------------------------------------------------
                             55 ; ram data
                             56 ;--------------------------------------------------------
                             57 	.area _DATA
   0000                      58 _damage_cooldown::
   0000                      59 	.ds 1
   0001                      60 _attack_wait::
   0001                      61 	.ds 1
   0002                      62 _shoot_cooldown::
   0002                      63 	.ds 1
   0003                      64 _jump_power::
   0003                      65 	.ds 1
   0004                      66 _platform_vx::
   0004                      67 	.ds 1
   0005                      68 _death_cooldown::
   0005                      69 	.ds 1
   0006                      70 _princess_parent::
   0006                      71 	.ds 2
   0008                      72 _archer_accel_y::
   0008                      73 	.ds 2
   000A                      74 _tile_collision::
   000A                      75 	.ds 1
   000B                      76 _aimc::
   000B                      77 	.ds 1
   000C                      78 _hit_cooldown::
   000C                      79 	.ds 1
   000D                      80 _archer_data::
   000D                      81 	.ds 2
                             82 ;--------------------------------------------------------
                             83 ; CODE rom data
                             84 ;--------------------------------------------------------
                             85 	.area _CODE
   0000                      86 _bank_SpritePlayer:
   0000 02                   87 	.db #0x02	; 2
                             88 ;--------------------------------------------------------
                             89 ; absolute external ram data
                             90 ;--------------------------------------------------------
                             91 	.area _DABS (ABS)
                             92 ;--------------------------------------------------------
                             93 ; global & static initialisations
                             94 ;--------------------------------------------------------
                             95 	.area _HOME
                             96 	.area _GSINIT
                             97 	.area _GSFINAL
                             98 	.area _GSINIT
                             99 ;custom_datas.h:54: UINT8 damage_cooldown = 30u;
   0000 21r00r00            100 	ld	hl, #_damage_cooldown
   0003 36 1E               101 	ld	(hl), #0x1e
                            102 ;custom_datas.h:55: UINT8 attack_wait = 32u;
   0005 21r01r00            103 	ld	hl, #_attack_wait
   0008 36 20               104 	ld	(hl), #0x20
                            105 ;SpritePlayer.c:25: INT8 shoot_cooldown = 0;
   000A 21r02r00            106 	ld	hl, #_shoot_cooldown
   000D 36 00               107 	ld	(hl), #0x00
                            108 ;SpritePlayer.c:26: UINT8 jump_power = 0u;
   000F 21r03r00            109 	ld	hl, #_jump_power
   0012 36 00               110 	ld	(hl), #0x00
                            111 ;SpritePlayer.c:27: INT8 platform_vx = 0;
   0014 21r04r00            112 	ld	hl, #_platform_vx
   0017 36 00               113 	ld	(hl), #0x00
                            114 ;SpritePlayer.c:28: UINT8 death_cooldown = 0;
   0019 21r05r00            115 	ld	hl, #_death_cooldown
   001C 36 00               116 	ld	(hl), #0x00
                            117 ;SpritePlayer.c:30: struct Sprite* princess_parent = 0;
   001E 21r06r00            118 	ld	hl, #_princess_parent
   0021 36 00               119 	ld	(hl), #0x00
   0023 23                  120 	inc	hl
   0024 36 00               121 	ld	(hl), #0x00
                            122 ;--------------------------------------------------------
                            123 ; Home
                            124 ;--------------------------------------------------------
                            125 	.area _HOME
                            126 ;C:/GB/ZGB/common/include/Banks/SetBankCommon.h:4: void empty(void) __nonbanked {}
                            127 ;	---------------------------------
                            128 ; Function empty
                            129 ; ---------------------------------
   0000                     130 _empty::
   0000 C9                  131 	ret
                            132 	.area _HOME
                            133 ;--------------------------------------------------------
                            134 ; code
                            135 ;--------------------------------------------------------
                            136 	.area _CODE_2
                            137 ;SpritePlayer.c:57: void Start_SpritePlayer() {
                            138 ;	---------------------------------
                            139 ; Function Start_SpritePlayer
                            140 ; ---------------------------------
   0000                     141 _Start_SpritePlayer::
   0000 E8 FE               142 	add	sp, #-2
                            143 ;SpritePlayer.c:58: archer_data = (struct ArcherInfo*)THIS->custom_data;
   0002 21r01r00            144 	ld	hl, #_THIS + 1
   0005 2B                  145 	dec	hl
   0006 4E                  146 	ld	c, (hl)
   0007 23                  147 	inc	hl
   0008 46                  148 	ld	b, (hl)
   0009 21 19 00            149 	ld	hl, #0x0019
   000C 09                  150 	add	hl, bc
   000D 33                  151 	inc	sp
   000E 33                  152 	inc	sp
   000F E5                  153 	push	hl
   0010 F8 00               154 	ldhl	sp,	#0
   0012 2A                  155 	ld	a, (hl+)
   0013 5E                  156 	ld	e, (hl)
   0014 21r0Dr00            157 	ld	hl, #_archer_data
   0017 22                  158 	ld	(hl+), a
   0018 73                  159 	ld	(hl), e
                            160 ;SpritePlayer.c:61: THIS->coll_x = 5;
   0019 21 0D 00            161 	ld	hl, #0x000d
   001C 09                  162 	add	hl, bc
   001D 4D                  163 	ld	c,l
   001E 7C                  164 	ld	a,h
   001F 36 05               165 	ld	(hl), #0x05
                            166 ;SpritePlayer.c:62: THIS->coll_y = 5;
   0021 21r01r00            167 	ld	hl, #_THIS + 1
   0024 2B                  168 	dec	hl
   0025 4E                  169 	ld	c, (hl)
   0026 23                  170 	inc	hl
   0027 46                  171 	ld	b, (hl)
   0028 21 0E 00            172 	ld	hl, #0x000e
   002B 09                  173 	add	hl, bc
   002C 4D                  174 	ld	c,l
   002D 7C                  175 	ld	a,h
   002E 36 05               176 	ld	(hl), #0x05
                            177 ;SpritePlayer.c:63: THIS->coll_w = 6;
   0030 21r01r00            178 	ld	hl, #_THIS + 1
   0033 2B                  179 	dec	hl
   0034 4E                  180 	ld	c, (hl)
   0035 23                  181 	inc	hl
   0036 46                  182 	ld	b, (hl)
   0037 21 0F 00            183 	ld	hl, #0x000f
   003A 09                  184 	add	hl, bc
   003B 4D                  185 	ld	c,l
   003C 7C                  186 	ld	a,h
   003D 36 06               187 	ld	(hl), #0x06
                            188 ;SpritePlayer.c:64: THIS->coll_h = 11;
   003F 21r01r00            189 	ld	hl, #_THIS + 1
   0042 2B                  190 	dec	hl
   0043 4E                  191 	ld	c, (hl)
   0044 23                  192 	inc	hl
   0045 46                  193 	ld	b, (hl)
   0046 21 10 00            194 	ld	hl, #0x0010
   0049 09                  195 	add	hl, bc
   004A 4D                  196 	ld	c,l
   004B 7C                  197 	ld	a,h
   004C 36 0B               198 	ld	(hl), #0x0b
                            199 ;SpritePlayer.c:66: archer_state = STATE_JUMPING;
   004E 21r00r00            200 	ld	hl, #_archer_state
   0051 36 02               201 	ld	(hl), #0x02
                            202 ;SpritePlayer.c:68: hit_cooldown = 36u;
   0053 21r0Cr00            203 	ld	hl, #_hit_cooldown
   0056 36 24               204 	ld	(hl), #0x24
                            205 ;SpritePlayer.c:70: }
   0058 E8 02               206 	add	sp, #2
   005A C9                  207 	ret
   005B                     208 _anim_idle:
   005B 01                  209 	.db #0x01	; 1
   005C 00                  210 	.db #0x00	; 0
   005D                     211 _anim_jump:
   005D 01                  212 	.db #0x01	; 1
   005E 0A                  213 	.db #0x0a	; 10
   005F                     214 _anim_jump_up:
   005F 01                  215 	.db #0x01	; 1
   0060 0B                  216 	.db #0x0b	; 11
   0061                     217 _anim_up:
   0061 01                  218 	.db #0x01	; 1
   0062 00                  219 	.db #0x00	; 0
   0063                     220 _anim_dead:
   0063 01                  221 	.db #0x01	; 1
   0064 0F                  222 	.db #0x0f	; 15
   0065                     223 _anim_walk:
   0065 04                  224 	.db #0x04	; 4
   0066 07                  225 	.db #0x07	; 7
   0067 06                  226 	.db #0x06	; 6
   0068 05                  227 	.db #0x05	; 5
   0069 04                  228 	.db #0x04	; 4
   006A                     229 _anim_shield:
   006A 01                  230 	.db #0x01	; 1
   006B 03                  231 	.db #0x03	; 3
   006C                     232 _anim_hit:
   006C 02                  233 	.db #0x02	; 2
   006D 08                  234 	.db #0x08	; 8
   006E 09                  235 	.db #0x09	; 9
   006F                     236 _anim_shoot:
   006F 02                  237 	.db #0x02	; 2
   0070 01                  238 	.db #0x01	; 1
   0071 02                  239 	.db #0x02	; 2
   0072                     240 _anim_flying:
   0072 04                  241 	.db #0x04	; 4
   0073 0C                  242 	.db #0x0c	; 12
   0074 0D                  243 	.db #0x0d	; 13
   0075 0E                  244 	.db #0x0e	; 14
   0076 0D                  245 	.db #0x0d	; 13
                            246 ;SpritePlayer.c:72: void Update_SpritePlayer() {
                            247 ;	---------------------------------
                            248 ; Function Update_SpritePlayer
                            249 ; ---------------------------------
   0077                     250 _Update_SpritePlayer::
   0077 E8 EE               251 	add	sp, #-18
                            252 ;SpritePlayer.c:74: if(archer_state == STATE_DIAG ){
   0079 21r00r00            253 	ld	hl, #_archer_state
   007C 7E                  254 	ld	a, (hl)
   007D D6 05               255 	sub	a, #0x05
   007F 20 10               256 	jr	NZ,00104$
                            257 ;SpritePlayer.c:75: if(ANY_KEY_PRESSED){
   0081 21r00r00            258 	ld	hl, #_keys
   0084 7E                  259 	ld	a, (hl)
   0085 B7                  260 	or	a, a
   0086 CAr83r0B            261 	jp	Z,00281$
                            262 ;SpritePlayer.c:76: show_diag = -1;
   0089 21r00r00            263 	ld	hl, #_show_diag
   008C 36 FF               264 	ld	(hl), #0xff
                            265 ;SpritePlayer.c:78: return;
   008E C3r83r0B            266 	jp	00281$
   0091                     267 00104$:
                            268 ;SpritePlayer.c:81: if(KEY_TICKED(J_START)){
   0091 21r00r00            269 	ld	hl, #_keys
   0094 4E                  270 	ld	c, (hl)
   0095 21r00r00            271 	ld	hl, #_previous_keys
   0098 7E                  272 	ld	a, (hl)
   0099 CB 79               273 	bit	7, c
   009B 28 0E               274 	jr	Z,00106$
   009D CB 7F               275 	bit	7, a
   009F 20 0A               276 	jr	NZ,00106$
                            277 ;SpritePlayer.c:82: SetState(StateGame);
   00A1 AF                  278 	xor	a, a
   00A2 F5                  279 	push	af
   00A3 33                  280 	inc	sp
   00A4 CDr00r00            281 	call	_SetState
   00A7 33                  282 	inc	sp
                            283 ;SpritePlayer.c:83: return;
   00A8 C3r83r0B            284 	jp	00281$
   00AB                     285 00106$:
                            286 ;SpritePlayer.c:86: if (KEY_RELEASED(J_SELECT)){
   00AB CB 77               287 	bit	6, a
   00AD CArE3r00            288 	jp	Z,00111$
   00B0 CB 71               289 	bit	6, c
   00B2 C2rE3r00            290 	jp	NZ,00111$
                            291 ;SpritePlayer.c:87: archer_data->amulet += 1u;
   00B5 21r0Er00            292 	ld	hl, #_archer_data + 1
   00B8 2B                  293 	dec	hl
   00B9 4E                  294 	ld	c, (hl)
   00BA 23                  295 	inc	hl
   00BB 46                  296 	ld	b, (hl)
   00BC 0A                  297 	ld	a, (bc)
   00BD 3C                  298 	inc	a
   00BE 02                  299 	ld	(bc), a
   00BF 2B                  300 	dec	hl
   00C0 4E                  301 	ld	c, (hl)
   00C1 23                  302 	inc	hl
   00C2 46                  303 	ld	b, (hl)
                            304 ;SpritePlayer.c:88: archer_data->amulet %= 6u;
   00C3 0A                  305 	ld	a, (bc)
   00C4 5F                  306 	ld	e, a
   00C5 16 00               307 	ld	d, #0x00
   00C7 C5                  308 	push	bc
   00C8 21 06 00            309 	ld	hl, #0x0006
   00CB E5                  310 	push	hl
   00CC D5                  311 	push	de
   00CD CDr00r00            312 	call	__moduint
   00D0 E8 04               313 	add	sp, #4
   00D2 C1                  314 	pop	bc
   00D3 7B                  315 	ld	a, e
   00D4 02                  316 	ld	(bc), a
                            317 ;SpritePlayer.c:87: archer_data->amulet += 1u;
   00D5 21r0Er00            318 	ld	hl, #_archer_data + 1
   00D8 2B                  319 	dec	hl
   00D9 4E                  320 	ld	c, (hl)
   00DA 23                  321 	inc	hl
   00DB 46                  322 	ld	b, (hl)
                            323 ;SpritePlayer.c:89: if(archer_data->amulet == 0u){
   00DC 0A                  324 	ld	a, (bc)
   00DD B7                  325 	or	a, a
   00DE 20 03               326 	jr	NZ,00111$
                            327 ;SpritePlayer.c:90: archer_data->amulet = 1u;
   00E0 3E 01               328 	ld	a, #0x01
   00E2 02                  329 	ld	(bc), a
   00E3                     330 00111$:
                            331 ;SpritePlayer.c:94: switch(archer_state) {
   00E3 21r00r00            332 	ld	hl, #_archer_state
   00E6 7E                  333 	ld	a, (hl)
   00E7 B7                  334 	or	a, a
   00E8 CArAAr01            335 	jp	Z,00126$
   00EB 21r00r00            336 	ld	hl, #_archer_state
   00EE 7E                  337 	ld	a, (hl)
   00EF 3D                  338 	dec	a
   00F0 CArAAr01            339 	jp	Z,00126$
   00F3 21r00r00            340 	ld	hl, #_archer_state
   00F6 7E                  341 	ld	a, (hl)
   00F7 D6 02               342 	sub	a, #0x02
   00F9 CAr42r03            343 	jp	Z,00161$
   00FC 21r00r00            344 	ld	hl, #_archer_state
   00FF 7E                  345 	ld	a, (hl)
   0100 D6 04               346 	sub	a, #0x04
   0102 CAr09r04            347 	jp	Z,00180$
   0105 21r00r00            348 	ld	hl, #_archer_state
   0108 7E                  349 	ld	a, (hl)
   0109 D6 06               350 	sub	a, #0x06
   010B C2r34r04            351 	jp	NZ,00185$
                            352 ;SpritePlayer.c:96: death_cooldown ++;
   010E 21r05r00            353 	ld	hl, #_death_cooldown
   0111 34                  354 	inc	(hl)
                            355 ;SpritePlayer.c:97: if(death_cooldown == 6){
   0112 7E                  356 	ld	a, (hl)
   0113 D6 06               357 	sub	a, #0x06
   0115 20 14               358 	jr	NZ,00115$
                            359 ;SpritePlayer.c:98: SetSpriteAnim(THIS, anim_dead, 12u);	
   0117 3E 0C               360 	ld	a, #0x0c
   0119 F5                  361 	push	af
   011A 33                  362 	inc	sp
   011B 21r63r00            363 	ld	hl, #_anim_dead
   011E E5                  364 	push	hl
   011F 21r00r00            365 	ld	hl, #_THIS
   0122 2A                  366 	ld	a, (hl+)
   0123 66                  367 	ld	h, (hl)
   0124 6F                  368 	ld	l, a
   0125 E5                  369 	push	hl
   0126 CDr00r00            370 	call	_SetSpriteAnim
   0129 E8 05               371 	add	sp, #5
   012B                     372 00115$:
                            373 ;SpritePlayer.c:100: if (death_cooldown < 12){
   012B 21r05r00            374 	ld	hl, #_death_cooldown
   012E 7E                  375 	ld	a, (hl)
   012F D6 0C               376 	sub	a, #0x0c
   0131 30 16               377 	jr	NC,00123$
                            378 ;SpritePlayer.c:101: TranslateSprite(THIS, 0, -2 );
   0133 3E FE               379 	ld	a, #0xfe
   0135 F5                  380 	push	af
   0136 33                  381 	inc	sp
   0137 AF                  382 	xor	a, a
   0138 F5                  383 	push	af
   0139 33                  384 	inc	sp
   013A 21r00r00            385 	ld	hl, #_THIS
   013D 2A                  386 	ld	a, (hl+)
   013E 66                  387 	ld	h, (hl)
   013F 6F                  388 	ld	l, a
   0140 E5                  389 	push	hl
   0141 CDr00r00            390 	call	_TranslateSprite
   0144 E8 04               391 	add	sp, #4
   0146 C3r83r0B            392 	jp	00281$
   0149                     393 00123$:
                            394 ;SpritePlayer.c:103: if (death_cooldown < 160){
   0149 21r05r00            395 	ld	hl, #_death_cooldown
   014C 7E                  396 	ld	a, (hl)
   014D D6 A0               397 	sub	a, #0xa0
   014F 30 16               398 	jr	NC,00120$
                            399 ;SpritePlayer.c:104: TranslateSprite(THIS, 0, 1);
   0151 3E 01               400 	ld	a, #0x01
   0153 F5                  401 	push	af
   0154 33                  402 	inc	sp
   0155 AF                  403 	xor	a, a
   0156 F5                  404 	push	af
   0157 33                  405 	inc	sp
   0158 21r00r00            406 	ld	hl, #_THIS
   015B 2A                  407 	ld	a, (hl+)
   015C 66                  408 	ld	h, (hl)
   015D 6F                  409 	ld	l, a
   015E E5                  410 	push	hl
   015F CDr00r00            411 	call	_TranslateSprite
   0162 E8 04               412 	add	sp, #4
   0164 C3r83r0B            413 	jp	00281$
   0167                     414 00120$:
                            415 ;SpritePlayer.c:106: death_cooldown = 0;
   0167 21r05r00            416 	ld	hl, #_death_cooldown
   016A 36 00               417 	ld	(hl), #0x00
                            418 ;SpritePlayer.c:87: archer_data->amulet += 1u;
   016C 21r0Er00            419 	ld	hl, #_archer_data + 1
   016F 2B                  420 	dec	hl
   0170 4E                  421 	ld	c, (hl)
   0171 23                  422 	inc	hl
   0172 46                  423 	ld	b, (hl)
                            424 ;SpritePlayer.c:107: archer_data->ups -= 1;
   0173 03                  425 	inc	bc
   0174 03                  426 	inc	bc
   0175 03                  427 	inc	bc
   0176 0A                  428 	ld	a, (bc)
   0177 3D                  429 	dec	a
   0178 02                  430 	ld	(bc), a
                            431 ;SpritePlayer.c:108: archer_data->hp = 100;	
   0179 2B                  432 	dec	hl
   017A 4E                  433 	ld	c, (hl)
   017B 23                  434 	inc	hl
   017C 46                  435 	ld	b, (hl)
   017D 03                  436 	inc	bc
   017E 03                  437 	inc	bc
   017F 78                  438 	ld	a, b
   0180 69                  439 	ld	l, c
   0181 67                  440 	ld	h, a
   0182 36 64               441 	ld	(hl), #0x64
                            442 ;SpritePlayer.c:109: if (archer_data->ups == -1){SetState(StateGameOver);}
   0184 21r0Er00            443 	ld	hl, #_archer_data + 1
   0187 2B                  444 	dec	hl
   0188 4E                  445 	ld	c, (hl)
   0189 23                  446 	inc	hl
   018A 46                  447 	ld	b, (hl)
   018B 03                  448 	inc	bc
   018C 03                  449 	inc	bc
   018D 03                  450 	inc	bc
   018E 78                  451 	ld	a, b
   018F 69                  452 	ld	l, c
   0190 67                  453 	ld	h, a
   0191 7E                  454 	ld	a, (hl)
   0192 3C                  455 	inc	a
   0193 20 0B               456 	jr	NZ,00117$
   0195 3E 03               457 	ld	a, #0x03
   0197 F5                  458 	push	af
   0198 33                  459 	inc	sp
   0199 CDr00r00            460 	call	_SetState
   019C 33                  461 	inc	sp
   019D C3r83r0B            462 	jp	00281$
   01A0                     463 00117$:
                            464 ;SpritePlayer.c:110: else{SetState(StateGame);}	
   01A0 AF                  465 	xor	a, a
   01A1 F5                  466 	push	af
   01A2 33                  467 	inc	sp
   01A3 CDr00r00            468 	call	_SetState
   01A6 33                  469 	inc	sp
                            470 ;SpritePlayer.c:113: return;
   01A7 C3r83r0B            471 	jp	00281$
                            472 ;SpritePlayer.c:116: case STATE_NORMAL_PLATFORM:
   01AA                     473 00126$:
                            474 ;SpritePlayer.c:117: MoveArcher();
   01AA CDr01r0D            475 	call	_MoveArcher
                            476 ;SpritePlayer.c:118: CheckCollisionTile();
   01AD CDr09r0E            477 	call	_CheckCollisionTile
                            478 ;SpritePlayer.c:119: if(shoot_cooldown) {
   01B0 21r02r00            479 	ld	hl, #_shoot_cooldown
   01B3 7E                  480 	ld	a, (hl)
   01B4 B7                  481 	or	a, a
   01B5 28 17               482 	jr	Z,00144$
                            483 ;SpritePlayer.c:120: SetSpriteAnim(THIS, anim_shoot, 12u);
   01B7 3E 0C               484 	ld	a, #0x0c
   01B9 F5                  485 	push	af
   01BA 33                  486 	inc	sp
   01BB 21r6Fr00            487 	ld	hl, #_anim_shoot
   01BE E5                  488 	push	hl
   01BF 21r00r00            489 	ld	hl, #_THIS
   01C2 2A                  490 	ld	a, (hl+)
   01C3 66                  491 	ld	h, (hl)
   01C4 6F                  492 	ld	l, a
   01C5 E5                  493 	push	hl
   01C6 CDr00r00            494 	call	_SetSpriteAnim
   01C9 E8 05               495 	add	sp, #5
   01CB C3r4Fr02            496 	jp	00145$
   01CE                     497 00144$:
                            498 ;SpritePlayer.c:81: if(KEY_TICKED(J_START)){
   01CE 21r00r00            499 	ld	hl, #_keys
   01D1 7E                  500 	ld	a, (hl)
                            501 ;SpritePlayer.c:122: if(KEY_PRESSED(J_RIGHT) || KEY_PRESSED(J_LEFT) ) {
   01D2 CB 47               502 	bit	0, a
   01D4 20 04               503 	jr	NZ,00130$
   01D6 CB 4F               504 	bit	1, a
   01D8 28 17               505 	jr	Z,00131$
   01DA                     506 00130$:
                            507 ;SpritePlayer.c:123: SetSpriteAnim(THIS, anim_walk, 16u);
   01DA 3E 10               508 	ld	a, #0x10
   01DC F5                  509 	push	af
   01DD 33                  510 	inc	sp
   01DE 21r65r00            511 	ld	hl, #_anim_walk
   01E1 E5                  512 	push	hl
   01E2 21r00r00            513 	ld	hl, #_THIS
   01E5 2A                  514 	ld	a, (hl+)
   01E6 66                  515 	ld	h, (hl)
   01E7 6F                  516 	ld	l, a
   01E8 E5                  517 	push	hl
   01E9 CDr00r00            518 	call	_SetSpriteAnim
   01EC E8 05               519 	add	sp, #5
   01EE C3r22r02            520 	jp	00132$
   01F1                     521 00131$:
                            522 ;SpritePlayer.c:125: if (archer_state == STATE_NORMAL_PLATFORM){SetSpriteAnim(THIS, anim_flying, 16u);}
   01F1 21r00r00            523 	ld	hl, #_archer_state
   01F4 7E                  524 	ld	a, (hl)
   01F5 3D                  525 	dec	a
   01F6 20 16               526 	jr	NZ,00128$
   01F8 3E 10               527 	ld	a, #0x10
   01FA F5                  528 	push	af
   01FB 33                  529 	inc	sp
   01FC 21r72r00            530 	ld	hl, #_anim_flying
   01FF E5                  531 	push	hl
   0200 21r00r00            532 	ld	hl, #_THIS
   0203 2A                  533 	ld	a, (hl+)
   0204 66                  534 	ld	h, (hl)
   0205 6F                  535 	ld	l, a
   0206 E5                  536 	push	hl
   0207 CDr00r00            537 	call	_SetSpriteAnim
   020A E8 05               538 	add	sp, #5
   020C 18 14               539 	jr	00132$
   020E                     540 00128$:
                            541 ;SpritePlayer.c:126: else{SetSpriteAnim(THIS, anim_idle, 33u);}					
   020E 3E 21               542 	ld	a, #0x21
   0210 F5                  543 	push	af
   0211 33                  544 	inc	sp
   0212 21r5Br00            545 	ld	hl, #_anim_idle
   0215 E5                  546 	push	hl
   0216 21r00r00            547 	ld	hl, #_THIS
   0219 2A                  548 	ld	a, (hl+)
   021A 66                  549 	ld	h, (hl)
   021B 6F                  550 	ld	l, a
   021C E5                  551 	push	hl
   021D CDr00r00            552 	call	_SetSpriteAnim
   0220 E8 05               553 	add	sp, #5
   0222                     554 00132$:
                            555 ;SpritePlayer.c:81: if(KEY_TICKED(J_START)){
   0222 21r00r00            556 	ld	hl, #_keys
   0225 7E                  557 	ld	a, (hl)
                            558 ;SpritePlayer.c:128: if(KEY_PRESSED(J_UP)){
   0226 E6 04               559 	and	a, #0x04
   0228 4F                  560 	ld	c, a
   0229 06 00               561 	ld	b, #0x00
   022B 78                  562 	ld	a, b
   022C B1                  563 	or	a, c
   022D 28 0C               564 	jr	Z,00137$
                            565 ;SpritePlayer.c:129: aimc += 1;
   022F 21r0Br00            566 	ld	hl, #_aimc
   0232 7E                  567 	ld	a, (hl)
   0233 3C                  568 	inc	a
                            569 ;SpritePlayer.c:130: if(aimc >= 16){
   0234 77                  570 	ld	(hl),a
   0235 D6 10               571 	sub	a, #0x10
   0237 38 02               572 	jr	C,00137$
                            573 ;SpritePlayer.c:131: aimc=16;
   0239 36 10               574 	ld	(hl), #0x10
   023B                     575 00137$:
                            576 ;SpritePlayer.c:134: if(KEY_RELEASED(J_UP)){
   023B 21r00r00            577 	ld	hl, #_previous_keys
   023E 7E                  578 	ld	a, (hl)
   023F CB 57               579 	bit	2, a
   0241 28 0C               580 	jr	Z,00145$
   0243 78                  581 	ld	a, b
   0244 B1                  582 	or	a, c
   0245 20 08               583 	jr	NZ,00145$
                            584 ;SpritePlayer.c:135: aimc = 0;
   0247 21r0Br00            585 	ld	hl, #_aimc
   024A 36 00               586 	ld	(hl), #0x00
                            587 ;SpritePlayer.c:140: return;
   024C C3r83r0B            588 	jp	00281$
   024F                     589 00145$:
                            590 ;SpritePlayer.c:143: if (KEY_PRESSED(J_DOWN)){
   024F 21r00r00            591 	ld	hl, #_keys
   0252 7E                  592 	ld	a, (hl)
   0253 CB 5F               593 	bit	3, a
   0255 28 25               594 	jr	Z,00149$
                            595 ;SpritePlayer.c:144: SetSpriteAnim(THIS, anim_shield, 8u);
   0257 3E 08               596 	ld	a, #0x08
   0259 F5                  597 	push	af
   025A 33                  598 	inc	sp
   025B 21r6Ar00            599 	ld	hl, #_anim_shield
   025E E5                  600 	push	hl
   025F 21r00r00            601 	ld	hl, #_THIS
   0262 2A                  602 	ld	a, (hl+)
   0263 66                  603 	ld	h, (hl)
   0264 6F                  604 	ld	l, a
   0265 E5                  605 	push	hl
   0266 CDr00r00            606 	call	_SetSpriteAnim
   0269 E8 05               607 	add	sp, #5
                            608 ;SpritePlayer.c:145: THIS->coll_x = 8;
   026B 21r01r00            609 	ld	hl, #_THIS + 1
   026E 2B                  610 	dec	hl
   026F 4E                  611 	ld	c, (hl)
   0270 23                  612 	inc	hl
   0271 46                  613 	ld	b, (hl)
   0272 21 0D 00            614 	ld	hl, #0x000d
   0275 09                  615 	add	hl, bc
   0276 4D                  616 	ld	c,l
   0277 7C                  617 	ld	a,h
   0278 36 08               618 	ld	(hl), #0x08
   027A 18 15               619 	jr	00150$
   027C                     620 00149$:
   027C 21r01r00            621 	ld	hl, #_THIS + 1
   027F 2B                  622 	dec	hl
   0280 4E                  623 	ld	c, (hl)
   0281 23                  624 	inc	hl
   0282 46                  625 	ld	b, (hl)
                            626 ;SpritePlayer.c:146: }else if (THIS->coll_x != 5){
   0283 21 0D 00            627 	ld	hl, #0x000d
   0286 09                  628 	add	hl, bc
   0287 4D                  629 	ld	c, l
   0288 44                  630 	ld	b, h
   0289 0A                  631 	ld	a, (bc)
   028A D6 05               632 	sub	a, #0x05
   028C 28 03               633 	jr	Z,00150$
                            634 ;SpritePlayer.c:147: THIS->coll_x = 5;
   028E 3E 05               635 	ld	a, #0x05
   0290 02                  636 	ld	(bc), a
   0291                     637 00150$:
                            638 ;SpritePlayer.c:150: if(KEY_TICKED(J_A)) {
   0291 21r00r00            639 	ld	hl, #_keys
   0294 7E                  640 	ld	a, (hl)
   0295 CB 67               641 	bit	4, a
   0297 28 0B               642 	jr	Z,00152$
   0299 21r00r00            643 	ld	hl, #_previous_keys
   029C 7E                  644 	ld	a, (hl)
   029D CB 67               645 	bit	4, a
   029F 20 03               646 	jr	NZ,00152$
                            647 ;SpritePlayer.c:151: Jump();
   02A1 CDrCCr0C            648 	call	_Jump
   02A4                     649 00152$:
                            650 ;SpritePlayer.c:153: if(shoot_cooldown) {
   02A4 21r02r00            651 	ld	hl, #_shoot_cooldown
   02A7 7E                  652 	ld	a, (hl)
   02A8 B7                  653 	or	a, a
   02A9 28 04               654 	jr	Z,00157$
                            655 ;SpritePlayer.c:154: shoot_cooldown -= 1u;
   02AB 35                  656 	dec	(hl)
   02AC C3r09r03            657 	jp	00158$
   02AF                     658 00157$:
                            659 ;SpritePlayer.c:156: if(KEY_TICKED(J_B) & (!KEY_PRESSED(J_DOWN) | (KEY_PRESSED(J_DOWN) & archer_state == STATE_JUMPING))) {
   02AF 21r00r00            660 	ld	hl, #_keys
   02B2 7E                  661 	ld	a, (hl)
   02B3 CB 6F               662 	bit	5, a
   02B5 28 09               663 	jr	Z,00283$
   02B7 21r00r00            664 	ld	hl, #_previous_keys
   02BA 4E                  665 	ld	c, (hl)
   02BB AF                  666 	xor	a, a
   02BC CB 69               667 	bit	5, c
   02BE 28 04               668 	jr	Z,00284$
   02C0                     669 00283$:
   02C0 16 00               670 	ld	d, #0x00
   02C2 18 02               671 	jr	00285$
   02C4                     672 00284$:
   02C4 16 01               673 	ld	d, #0x01
   02C6                     674 00285$:
   02C6 21r00r00            675 	ld	hl, #_keys
   02C9 4E                  676 	ld	c, (hl)
   02CA 06 00               677 	ld	b, #0x00
   02CC 79                  678 	ld	a, c
   02CD E6 08               679 	and	a, #0x08
   02CF 4F                  680 	ld	c, a
   02D0 06 00               681 	ld	b, #0x00
   02D2 78                  682 	ld	a, b
   02D3 B1                  683 	or	a, c
   02D4 D6 01               684 	sub	a,#0x01
   02D6 3E 00               685 	ld	a, #0x00
   02D8 17                  686 	rla
   02D9 F8 11               687 	ldhl	sp,	#17
   02DB 77                  688 	ld	(hl), a
   02DC 21r00r00            689 	ld	hl, #_archer_state
   02DF 7E                  690 	ld	a, (hl)
   02E0 D6 02               691 	sub	a, #0x02
   02E2 3E 01               692 	ld	a, #0x01
   02E4 28 01               693 	jr	Z,00784$
   02E6 AF                  694 	xor	a, a
   02E7                     695 00784$:
   02E7 5F                  696 	ld	e, a
   02E8 AF                  697 	xor	a, a
   02E9 F5                  698 	push	af
   02EA 79                  699 	ld	a, c
   02EB A3                  700 	and	a, e
   02EC 4F                  701 	ld	c, a
   02ED F1                  702 	pop	af
   02EE A0                  703 	and	a, b
   02EF 47                  704 	ld	b, a
   02F0 F8 11               705 	ldhl	sp,	#17
   02F2 5E                  706 	ld	e, (hl)
   02F3 AF                  707 	xor	a, a
   02F4 F5                  708 	push	af
   02F5 79                  709 	ld	a, c
   02F6 B3                  710 	or	a, e
   02F7 4F                  711 	ld	c, a
   02F8 F1                  712 	pop	af
   02F9 B0                  713 	or	a, b
   02FA 47                  714 	ld	b, a
   02FB 5A                  715 	ld	e, d
   02FC 16 00               716 	ld	d, #0x00
   02FE 7B                  717 	ld	a, e
   02FF A1                  718 	and	a, c
   0300 4F                  719 	ld	c, a
   0301 7A                  720 	ld	a, d
   0302 A0                  721 	and	a, b
   0303 B1                  722 	or	a, c
   0304 28 03               723 	jr	Z,00158$
                            724 ;SpritePlayer.c:157: Shoot();
   0306 CDr8Cr0B            725 	call	_Shoot
   0309                     726 00158$:
                            727 ;SpritePlayer.c:161: if((archer_accel_y >> 3) > 1) {
   0309 21r09r00            728 	ld	hl, #_archer_accel_y + 1
   030C 2B                  729 	dec	hl
   030D 4E                  730 	ld	c, (hl)
   030E 23                  731 	inc	hl
   030F 46                  732 	ld	b, (hl)
   0310 CB 28               733 	sra	b
   0312 CB 19               734 	rr	c
   0314 CB 28               735 	sra	b
   0316 CB 19               736 	rr	c
   0318 CB 28               737 	sra	b
   031A CB 19               738 	rr	c
   031C 78                  739 	ld	a, b
   031D 5F                  740 	ld	e, a
   031E 3E 00               741 	ld	a, #0x00
   0320 57                  742 	ld	d, a
   0321 3E 01               743 	ld	a, #0x01
   0323 B9                  744 	cp	a, c
   0324 3E 00               745 	ld	a, #0x00
   0326 98                  746 	sbc	a, b
   0327 CB 7B               747 	bit	7, e
   0329 28 07               748 	jr	Z,00785$
   032B CB 7A               749 	bit	7, d
   032D 20 08               750 	jr	NZ,00786$
   032F BF                  751 	cp	a, a
   0330 18 05               752 	jr	00786$
   0332                     753 00785$:
   0332 CB 7A               754 	bit	7, d
   0334 28 01               755 	jr	Z,00786$
   0336 37                  756 	scf
   0337                     757 00786$:
   0337 D2r34r04            758 	jp	NC, 00185$
                            759 ;SpritePlayer.c:162: archer_state = STATE_JUMPING;
   033A 21r00r00            760 	ld	hl, #_archer_state
   033D 36 02               761 	ld	(hl), #0x02
                            762 ;SpritePlayer.c:165: break;
   033F C3r34r04            763 	jp	00185$
                            764 ;SpritePlayer.c:166: case STATE_JUMPING:
   0342                     765 00161$:
                            766 ;SpritePlayer.c:167: if(shoot_cooldown) {
   0342 21r02r00            767 	ld	hl, #_shoot_cooldown
   0345 7E                  768 	ld	a, (hl)
   0346 B7                  769 	or	a, a
   0347 28 04               770 	jr	Z,00178$
                            771 ;SpritePlayer.c:168: shoot_cooldown -= 1u;
   0349 35                  772 	dec	(hl)
   034A C3rFFr03            773 	jp	00179$
   034D                     774 00178$:
                            775 ;SpritePlayer.c:81: if(KEY_TICKED(J_START)){
   034D E5                  776 	push	hl
   034E 21r00r00            777 	ld	hl, #_keys
   0351 7E                  778 	ld	a, (hl)
   0352 F8 13               779 	ldhl	sp,	#19
   0354 77                  780 	ld	(hl), a
   0355 E1                  781 	pop	hl
   0356 21r00r00            782 	ld	hl, #_previous_keys
   0359 4E                  783 	ld	c, (hl)
                            784 ;SpritePlayer.c:170: if(KEY_TICKED(J_B)) {
   035A F8 11               785 	ldhl	sp,	#17
   035C CB 6E               786 	bit	5, (hl)
   035E 28 0A               787 	jr	Z,00174$
   0360 CB 69               788 	bit	5, c
   0362 20 06               789 	jr	NZ,00174$
                            790 ;SpritePlayer.c:171: Shoot();
   0364 CDr8Cr0B            791 	call	_Shoot
   0367 C3rFFr03            792 	jp	00179$
   036A                     793 00174$:
                            794 ;SpritePlayer.c:173: if (archer_accel_y < 4){									
   036A 21r08r00            795 	ld	hl, #_archer_accel_y
   036D 7E                  796 	ld	a, (hl)
   036E D6 04               797 	sub	a, #0x04
   0370 23                  798 	inc	hl
   0371 7E                  799 	ld	a, (hl)
   0372 DE 00               800 	sbc	a, #0x00
   0374 56                  801 	ld	d, (hl)
   0375 3E 00               802 	ld	a, #0x00
   0377 5F                  803 	ld	e, a
   0378 CB 7B               804 	bit	7, e
   037A 28 07               805 	jr	Z,00790$
   037C CB 7A               806 	bit	7, d
   037E 20 08               807 	jr	NZ,00791$
   0380 BF                  808 	cp	a, a
   0381 18 05               809 	jr	00791$
   0383                     810 00790$:
   0383 CB 7A               811 	bit	7, d
   0385 28 01               812 	jr	Z,00791$
   0387 37                  813 	scf
   0388                     814 00791$:
   0388 D2rDEr03            815 	jp	NC, 00171$
                            816 ;SpritePlayer.c:176: jump_power += 1u;
   038B 21r03r00            817 	ld	hl, #_jump_power
   038E 46                  818 	ld	b, (hl)
   038F 04                  819 	inc	b
                            820 ;SpritePlayer.c:174: if(KEY_PRESSED(J_A)) {
   0390 F8 11               821 	ldhl	sp,	#17
   0392 7E                  822 	ld	a, (hl)
   0393 E6 10               823 	and	a, #0x10
   0395 5F                  824 	ld	e, a
   0396 16 00               825 	ld	d, #0x00
   0398 7A                  826 	ld	a, d
   0399 B3                  827 	or	a, e
   039A 28 18               828 	jr	Z,00168$
                            829 ;SpritePlayer.c:175: if (jump_power < 12u){
   039C 21r03r00            830 	ld	hl, #_jump_power
   039F 7E                  831 	ld	a, (hl)
   03A0 D6 0C               832 	sub	a, #0x0c
   03A2 30 24               833 	jr	NC,00169$
                            834 ;SpritePlayer.c:176: jump_power += 1u;
   03A4 70                  835 	ld	(hl), b
                            836 ;SpritePlayer.c:177: archer_accel_y -= 2;
   03A5 21r09r00            837 	ld	hl, #_archer_accel_y + 1
   03A8 2B                  838 	dec	hl
   03A9 5E                  839 	ld	e, (hl)
   03AA 23                  840 	inc	hl
   03AB 56                  841 	ld	d, (hl)
   03AC 1B                  842 	dec	de
   03AD 1B                  843 	dec	de
   03AE 2B                  844 	dec	hl
   03AF 73                  845 	ld	(hl), e
   03B0 23                  846 	inc	hl
   03B1 72                  847 	ld	(hl), d
   03B2 18 14               848 	jr	00169$
   03B4                     849 00168$:
                            850 ;SpritePlayer.c:179: }else if (KEY_RELEASED(J_A)){
   03B4 CB 61               851 	bit	4, c
   03B6 28 10               852 	jr	Z,00169$
   03B8 7A                  853 	ld	a, d
   03B9 B3                  854 	or	a, e
   03BA 20 0C               855 	jr	NZ,00169$
                            856 ;SpritePlayer.c:180: jump_power += 1u;
   03BC 21r03r00            857 	ld	hl, #_jump_power
   03BF 70                  858 	ld	(hl), b
                            859 ;SpritePlayer.c:181: archer_accel_y = 0;
   03C0 21r08r00            860 	ld	hl, #_archer_accel_y
   03C3 36 00               861 	ld	(hl), #0x00
   03C5 23                  862 	inc	hl
   03C6 36 00               863 	ld	(hl), #0x00
   03C8                     864 00169$:
                            865 ;SpritePlayer.c:183: SetSpriteAnim(THIS, anim_jump_up, 33u);
   03C8 3E 21               866 	ld	a, #0x21
   03CA F5                  867 	push	af
   03CB 33                  868 	inc	sp
   03CC 21r5Fr00            869 	ld	hl, #_anim_jump_up
   03CF E5                  870 	push	hl
   03D0 21r00r00            871 	ld	hl, #_THIS
   03D3 2A                  872 	ld	a, (hl+)
   03D4 66                  873 	ld	h, (hl)
   03D5 6F                  874 	ld	l, a
   03D6 E5                  875 	push	hl
   03D7 CDr00r00            876 	call	_SetSpriteAnim
   03DA E8 05               877 	add	sp, #5
   03DC 18 21               878 	jr	00179$
   03DE                     879 00171$:
                            880 ;SpritePlayer.c:185: jump_power = 0u;
   03DE 21r03r00            881 	ld	hl, #_jump_power
   03E1 36 00               882 	ld	(hl), #0x00
                            883 ;SpritePlayer.c:186: archer_accel_y += 1;
   03E3 21r08r00            884 	ld	hl, #_archer_accel_y
   03E6 34                  885 	inc	(hl)
   03E7 20 02               886 	jr	NZ,00793$
   03E9 23                  887 	inc	hl
   03EA 34                  888 	inc	(hl)
   03EB                     889 00793$:
                            890 ;SpritePlayer.c:187: SetSpriteAnim(THIS, anim_jump, 32u);
   03EB 3E 20               891 	ld	a, #0x20
   03ED F5                  892 	push	af
   03EE 33                  893 	inc	sp
   03EF 21r5Dr00            894 	ld	hl, #_anim_jump
   03F2 E5                  895 	push	hl
   03F3 21r00r00            896 	ld	hl, #_THIS
   03F6 2A                  897 	ld	a, (hl+)
   03F7 66                  898 	ld	h, (hl)
   03F8 6F                  899 	ld	l, a
   03F9 E5                  900 	push	hl
   03FA CDr00r00            901 	call	_SetSpriteAnim
   03FD E8 05               902 	add	sp, #5
   03FF                     903 00179$:
                            904 ;SpritePlayer.c:191: platform_vx = 0;
   03FF 21r04r00            905 	ld	hl, #_platform_vx
   0402 36 00               906 	ld	(hl), #0x00
                            907 ;SpritePlayer.c:192: MoveArcher();
   0404 CDr01r0D            908 	call	_MoveArcher
                            909 ;SpritePlayer.c:193: break;
   0407 18 2B               910 	jr	00185$
                            911 ;SpritePlayer.c:194: case STATE_HIT:
   0409                     912 00180$:
                            913 ;SpritePlayer.c:195: hit_cooldown -= 1;
   0409 21r0Cr00            914 	ld	hl, #_hit_cooldown
   040C 7E                  915 	ld	a, (hl)
   040D C6 FF               916 	add	a, #0xff
   040F 77                  917 	ld	(hl), a
                            918 ;SpritePlayer.c:196: MoveArcher();
   0410 CDr01r0D            919 	call	_MoveArcher
                            920 ;SpritePlayer.c:197: if (hit_cooldown == 0){
   0413 21r0Cr00            921 	ld	hl, #_hit_cooldown
   0416 7E                  922 	ld	a, (hl)
   0417 B7                  923 	or	a, a
   0418 20 1A               924 	jr	NZ,00185$
                            925 ;SpritePlayer.c:198: platform_vx = 0;
   041A 21r04r00            926 	ld	hl, #_platform_vx
   041D 36 00               927 	ld	(hl), #0x00
                            928 ;SpritePlayer.c:199: hit_cooldown = 24u;
   041F 21r0Cr00            929 	ld	hl, #_hit_cooldown
   0422 36 18               930 	ld	(hl), #0x18
                            931 ;SpritePlayer.c:200: if(KEY_PRESSED(J_A)) {
   0424 21r00r00            932 	ld	hl, #_keys
   0427 7E                  933 	ld	a, (hl)
   0428 CB 67               934 	bit	4, a
   042A 28 03               935 	jr	Z,00182$
                            936 ;SpritePlayer.c:201: Jump();
   042C CDrCCr0C            937 	call	_Jump
   042F                     938 00182$:
                            939 ;SpritePlayer.c:203: archer_state = STATE_NORMAL;
   042F 21r00r00            940 	ld	hl, #_archer_state
   0432 36 00               941 	ld	(hl), #0x00
                            942 ;SpritePlayer.c:206: }//end switch archer_state
   0434                     943 00185$:
                            944 ;SpritePlayer.c:209: if(princess_parent == 0 && archer_state != STATE_LADDER && archer_state != STATE_HIT && archer_state != STATE_DEAD) {
   0434 21r07r00            945 	ld	hl, #_princess_parent + 1
   0437 3A                  946 	ld	a, (hl-)
   0438 B6                  947 	or	a, (hl)
   0439 C2r5Dr05            948 	jp	NZ, 00198$
   043C 21r00r00            949 	ld	hl, #_archer_state
   043F 7E                  950 	ld	a, (hl)
   0440 D6 03               951 	sub	a, #0x03
   0442 CAr5Dr05            952 	jp	Z,00198$
   0445 21r00r00            953 	ld	hl, #_archer_state
   0448 7E                  954 	ld	a, (hl)
   0449 D6 04               955 	sub	a, #0x04
   044B CAr5Dr05            956 	jp	Z,00198$
   044E 21r00r00            957 	ld	hl, #_archer_state
   0451 7E                  958 	ld	a, (hl)
   0452 D6 06               959 	sub	a, #0x06
   0454 CAr5Dr05            960 	jp	Z,00198$
                            961 ;SpritePlayer.c:211: if(archer_accel_y < 24) {
   0457 21r08r00            962 	ld	hl, #_archer_accel_y
   045A 7E                  963 	ld	a, (hl)
   045B D6 18               964 	sub	a, #0x18
   045D 23                  965 	inc	hl
   045E 7E                  966 	ld	a, (hl)
   045F DE 00               967 	sbc	a, #0x00
   0461 56                  968 	ld	d, (hl)
   0462 3E 00               969 	ld	a, #0x00
   0464 5F                  970 	ld	e, a
   0465 CB 7B               971 	bit	7, e
   0467 28 07               972 	jr	Z,00798$
   0469 CB 7A               973 	bit	7, d
   046B 20 08               974 	jr	NZ,00799$
   046D BF                  975 	cp	a, a
   046E 18 05               976 	jr	00799$
   0470                     977 00798$:
   0470 CB 7A               978 	bit	7, d
   0472 28 01               979 	jr	Z,00799$
   0474 37                  980 	scf
   0475                     981 00799$:
   0475 30 08               982 	jr	NC,00187$
                            983 ;SpritePlayer.c:212: archer_accel_y += 1;
   0477 21r08r00            984 	ld	hl, #_archer_accel_y
   047A 34                  985 	inc	(hl)
   047B 20 02               986 	jr	NZ,00800$
   047D 23                  987 	inc	hl
   047E 34                  988 	inc	(hl)
   047F                     989 00800$:
   047F                     990 00187$:
                            991 ;SpritePlayer.c:214: tile_collision = TranslateSprite(THIS, 0, archer_accel_y  >> 4 );
   047F 21r08r00            992 	ld	hl, #_archer_accel_y
   0482 46                  993 	ld	b, (hl)
   0483 23                  994 	inc	hl
   0484 4E                  995 	ld	c, (hl)
   0485 CB 29               996 	sra	c
   0487 CB 18               997 	rr	b
   0489 CB 29               998 	sra	c
   048B CB 18               999 	rr	b
   048D CB 29              1000 	sra	c
   048F CB 18              1001 	rr	b
   0491 CB 29              1002 	sra	c
   0493 CB 18              1003 	rr	b
   0495 C5                 1004 	push	bc
   0496 33                 1005 	inc	sp
   0497 AF                 1006 	xor	a, a
   0498 F5                 1007 	push	af
   0499 33                 1008 	inc	sp
   049A 21r00r00           1009 	ld	hl, #_THIS
   049D 2A                 1010 	ld	a, (hl+)
   049E 66                 1011 	ld	h, (hl)
   049F 6F                 1012 	ld	l, a
   04A0 E5                 1013 	push	hl
   04A1 CDr00r00           1014 	call	_TranslateSprite
   04A4 E8 04              1015 	add	sp, #4
   04A6 21r0Ar00           1016 	ld	hl, #_tile_collision
   04A9 73                 1017 	ld	(hl), e
                           1018 ;SpritePlayer.c:215: if(!tile_collision && delta_time != 0 && archer_accel_y < 24) { //Do another iteration if there is no collision
   04AA 7E                 1019 	ld	a, (hl)
   04AB B7                 1020 	or	a, a
   04AC C2r0Br05           1021 	jp	NZ, 00189$
   04AF 21r00r00           1022 	ld	hl, #_delta_time
   04B2 7E                 1023 	ld	a, (hl)
   04B3 B7                 1024 	or	a, a
   04B4 CAr0Br05           1025 	jp	Z, 00189$
   04B7 21r08r00           1026 	ld	hl, #_archer_accel_y
   04BA 7E                 1027 	ld	a, (hl)
   04BB D6 18              1028 	sub	a, #0x18
   04BD 23                 1029 	inc	hl
   04BE 7E                 1030 	ld	a, (hl)
   04BF DE 00              1031 	sbc	a, #0x00
   04C1 56                 1032 	ld	d, (hl)
   04C2 3E 00              1033 	ld	a, #0x00
   04C4 5F                 1034 	ld	e, a
   04C5 CB 7B              1035 	bit	7, e
   04C7 28 07              1036 	jr	Z,00801$
   04C9 CB 7A              1037 	bit	7, d
   04CB 20 08              1038 	jr	NZ,00802$
   04CD BF                 1039 	cp	a, a
   04CE 18 05              1040 	jr	00802$
   04D0                    1041 00801$:
   04D0 CB 7A              1042 	bit	7, d
   04D2 28 01              1043 	jr	Z,00802$
   04D4 37                 1044 	scf
   04D5                    1045 00802$:
   04D5 D2r0Br05           1046 	jp	NC, 00189$
                           1047 ;SpritePlayer.c:216: archer_accel_y += 2;
   04D8 21r08r00           1048 	ld	hl, #_archer_accel_y
   04DB 7E                 1049 	ld	a, (hl)
   04DC C6 02              1050 	add	a, #0x02
   04DE 22                 1051 	ld	(hl+), a
   04DF 7E                 1052 	ld	a, (hl)
   04E0 CE 00              1053 	adc	a, #0x00
                           1054 ;SpritePlayer.c:217: tile_collision = TranslateSprite(THIS, 0, archer_accel_y >> 4);
   04E2 32                 1055 	ld	(hl-), a
   04E3 46                 1056 	ld	b, (hl)
   04E4 23                 1057 	inc	hl
   04E5 4E                 1058 	ld	c, (hl)
   04E6 CB 29              1059 	sra	c
   04E8 CB 18              1060 	rr	b
   04EA CB 29              1061 	sra	c
   04EC CB 18              1062 	rr	b
   04EE CB 29              1063 	sra	c
   04F0 CB 18              1064 	rr	b
   04F2 CB 29              1065 	sra	c
   04F4 CB 18              1066 	rr	b
   04F6 C5                 1067 	push	bc
   04F7 33                 1068 	inc	sp
   04F8 AF                 1069 	xor	a, a
   04F9 F5                 1070 	push	af
   04FA 33                 1071 	inc	sp
   04FB 21r00r00           1072 	ld	hl, #_THIS
   04FE 2A                 1073 	ld	a, (hl+)
   04FF 66                 1074 	ld	h, (hl)
   0500 6F                 1075 	ld	l, a
   0501 E5                 1076 	push	hl
   0502 CDr00r00           1077 	call	_TranslateSprite
   0505 E8 04              1078 	add	sp, #4
   0507 21r0Ar00           1079 	ld	hl, #_tile_collision
   050A 73                 1080 	ld	(hl), e
   050B                    1081 00189$:
                           1082 ;SpritePlayer.c:219: if(tile_collision) {
   050B 21r0Ar00           1083 	ld	hl, #_tile_collision
   050E 7E                 1084 	ld	a, (hl)
   050F B7                 1085 	or	a, a
   0510 CAr5Dr05           1086 	jp	Z, 00198$
                           1087 ;SpritePlayer.c:220: if(archer_state == STATE_JUMPING & archer_accel_y > 0) {
   0513 21r00r00           1088 	ld	hl, #_archer_state
   0516 7E                 1089 	ld	a, (hl)
   0517 D6 02              1090 	sub	a, #0x02
   0519 3E 01              1091 	ld	a, #0x01
   051B 28 01              1092 	jr	Z,00804$
   051D AF                 1093 	xor	a, a
   051E                    1094 00804$:
   051E 4F                 1095 	ld	c, a
   051F 21r08r00           1096 	ld	hl, #_archer_accel_y
   0522 3E 00              1097 	ld	a, #0x00
   0524 96                 1098 	sub	a, (hl)
   0525 23                 1099 	inc	hl
   0526 3E 00              1100 	ld	a, #0x00
   0528 9E                 1101 	sbc	a, (hl)
   0529 3E 00              1102 	ld	a, #0x00
   052B 57                 1103 	ld	d, a
   052C 5E                 1104 	ld	e, (hl)
   052D CB 7B              1105 	bit	7, e
   052F 28 07              1106 	jr	Z,00805$
   0531 CB 7A              1107 	bit	7, d
   0533 20 08              1108 	jr	NZ,00806$
   0535 BF                 1109 	cp	a, a
   0536 18 05              1110 	jr	00806$
   0538                    1111 00805$:
   0538 CB 7A              1112 	bit	7, d
   053A 28 01              1113 	jr	Z,00806$
   053C 37                 1114 	scf
   053D                    1115 00806$:
   053D 3E 00              1116 	ld	a, #0x00
   053F 17                 1117 	rla
   0540 A1                 1118 	and	a,c
   0541 28 0F              1119 	jr	Z,00193$
                           1120 ;SpritePlayer.c:221: archer_state = STATE_NORMAL;
   0543 21r00r00           1121 	ld	hl, #_archer_state
   0546 36 00              1122 	ld	(hl), #0x00
                           1123 ;SpritePlayer.c:222: archer_accel_y = 0;
   0548 21r08r00           1124 	ld	hl, #_archer_accel_y
   054B 36 00              1125 	ld	(hl), #0x00
   054D 23                 1126 	inc	hl
   054E 36 00              1127 	ld	(hl), #0x00
   0550 18 08              1128 	jr	00194$
   0552                    1129 00193$:
                           1130 ;SpritePlayer.c:225: archer_accel_y = 0;	
   0552 21r08r00           1131 	ld	hl, #_archer_accel_y
   0555 36 00              1132 	ld	(hl), #0x00
   0557 23                 1133 	inc	hl
   0558 36 00              1134 	ld	(hl), #0x00
   055A                    1135 00194$:
                           1136 ;SpritePlayer.c:227: CheckCollisionTile();
   055A CDr09r0E           1137 	call	_CheckCollisionTile
   055D                    1138 00198$:
                           1139 ;SpritePlayer.c:230: if(princess_parent && archer_state == STATE_JUMPING) {
   055D 21r07r00           1140 	ld	hl, #_princess_parent + 1
   0560 3A                 1141 	ld	a, (hl-)
   0561 B6                 1142 	or	a, (hl)
   0562 28 15              1143 	jr	Z,00203$
   0564 21r00r00           1144 	ld	hl, #_archer_state
   0567 7E                 1145 	ld	a, (hl)
   0568 D6 02              1146 	sub	a, #0x02
   056A 20 0D              1147 	jr	NZ,00203$
                           1148 ;SpritePlayer.c:231: archer_accel_y = 0;
   056C 21r08r00           1149 	ld	hl, #_archer_accel_y
   056F 36 00              1150 	ld	(hl), #0x00
   0571 23                 1151 	inc	hl
   0572 36 00              1152 	ld	(hl), #0x00
                           1153 ;SpritePlayer.c:232: archer_state = STATE_NORMAL;
   0574 21r00r00           1154 	ld	hl, #_archer_state
   0577 36 00              1155 	ld	(hl), #0x00
   0579                    1156 00203$:
                           1157 ;SpritePlayer.c:238: SPRITEMANAGER_ITERATE(scroll_tile, ispr) {
   0579 FAr01r00           1158 	ld	a, (#(_sprite_manager_updatables + 0x0001) + 0)
   057C 4F                 1159 	ld	c, a
   057D 06 00              1160 	ld	b, #0x00
   057F CB 21              1161 	sla	c
   0581 CB 10              1162 	rl	b
   0583 21r00r00           1163 	ld	hl, #_sprite_manager_sprites
   0586 09                 1164 	add	hl, bc
   0587 4D                 1165 	ld	c, l
   0588 44                 1166 	ld	b, h
   0589 59                 1167 	ld	e, c
   058A 50                 1168 	ld	d, b
   058B 1A                 1169 	ld	a,(de)
   058C F8 00              1170 	ldhl	sp,	#0
   058E 22                 1171 	ld	(hl+), a
   058F 13                 1172 	inc	de
   0590 1A                 1173 	ld	a, (de)
   0591 77                 1174 	ld	(hl), a
   0592 AF                 1175 	xor	a, a
   0593 F8 11              1176 	ldhl	sp,	#17
   0595 77                 1177 	ld	(hl), a
   0596                    1178 00279$:
   0596 21r00r00           1179 	ld	hl, #_sprite_manager_updatables + 0
   0599 4E                 1180 	ld	c, (hl)
   059A F8 11              1181 	ldhl	sp,	#17
   059C 7E                 1182 	ld	a, (hl)
   059D 91                 1183 	sub	a, c
   059E CAr83r0B           1184 	jp	Z,00281$
                           1185 ;SpritePlayer.c:239: if(ispr->type == SpriteItem) {
   05A1 D1                 1186 	pop	de
   05A2 D5                 1187 	push	de
   05A3 21 11 00           1188 	ld	hl, #0x0011
   05A6 19                 1189 	add	hl, de
   05A7 7D                 1190 	ld	a, l
   05A8 54                 1191 	ld	d, h
   05A9 F8 02              1192 	ldhl	sp,	#2
   05AB 22                 1193 	ld	(hl+), a
   05AC 72                 1194 	ld	(hl), d
   05AD 2B                 1195 	dec	hl
   05AE 5E                 1196 	ld	e, (hl)
   05AF 23                 1197 	inc	hl
   05B0 56                 1198 	ld	d, (hl)
   05B1 1A                 1199 	ld	a,(de)
   05B2 4F                 1200 	ld	c, a
                           1201 ;SpritePlayer.c:241: struct ItemInfo* dataitem = (struct ItemInfo*)ispr->custom_data;
   05B3 D1                 1202 	pop	de
   05B4 D5                 1203 	push	de
   05B5 21 19 00           1204 	ld	hl, #0x0019
   05B8 19                 1205 	add	hl, de
   05B9 7D                 1206 	ld	a, l
   05BA 54                 1207 	ld	d, h
   05BB F8 04              1208 	ldhl	sp,	#4
   05BD 22                 1209 	ld	(hl+), a
   05BE 72                 1210 	ld	(hl), d
   05BF 2B                 1211 	dec	hl
   05C0 2A                 1212 	ld	a, (hl+)
   05C1 5E                 1213 	ld	e, (hl)
   05C2 F8 09              1214 	ldhl	sp,	#9
   05C4 22                 1215 	ld	(hl+), a
   05C5 73                 1216 	ld	(hl), e
                           1217 ;SpritePlayer.c:239: if(ispr->type == SpriteItem) {
   05C6 79                 1218 	ld	a, c
   05C7 D6 03              1219 	sub	a, #0x03
   05C9 C2r14r07           1220 	jp	NZ,00220$
                           1221 ;SpritePlayer.c:240: if(CheckCollision(THIS, ispr)) {
   05CC E1                 1222 	pop	hl
   05CD E5                 1223 	push	hl
   05CE E5                 1224 	push	hl
   05CF 21r00r00           1225 	ld	hl, #_THIS
   05D2 2A                 1226 	ld	a, (hl+)
   05D3 66                 1227 	ld	h, (hl)
   05D4 6F                 1228 	ld	l, a
   05D5 E5                 1229 	push	hl
   05D6 CDr00r00           1230 	call	_CheckCollision
   05D9 E8 04              1231 	add	sp, #4
   05DB 7B                 1232 	ld	a, e
   05DC B7                 1233 	or	a, a
   05DD CAr14r07           1234 	jp	Z, 00220$
                           1235 ;SpritePlayer.c:241: struct ItemInfo* dataitem = (struct ItemInfo*)ispr->custom_data;
   05E0 F8 09              1236 	ldhl	sp,	#9
   05E2 2A                 1237 	ld	a, (hl+)
   05E3 5E                 1238 	ld	e, (hl)
   05E4 23                 1239 	inc	hl
   05E5 22                 1240 	ld	(hl+), a
   05E6 73                 1241 	ld	(hl), e
                           1242 ;SpritePlayer.c:242: if (dataitem->setup == 0u){ //se e' trasparente non faccio niente
   05E7 2B                 1243 	dec	hl
   05E8 5E                 1244 	ld	e, (hl)
   05E9 23                 1245 	inc	hl
   05EA 56                 1246 	ld	d, (hl)
   05EB 21 04 00           1247 	ld	hl, #0x0004
   05EE 19                 1248 	add	hl, de
   05EF 4D                 1249 	ld	c, l
   05F0 44                 1250 	ld	b, h
   05F1 0A                 1251 	ld	a, (bc)
   05F2 B7                 1252 	or	a, a
   05F3 C2r14r07           1253 	jp	NZ, 00220$
                           1254 ;SpritePlayer.c:243: switch(dataitem->type){
   05F6 F8 0B              1255 	ldhl	sp,#(12 - 1)
   05F8 4E                 1256 	ld	c, (hl)
   05F9 23                 1257 	inc	hl
   05FA 46                 1258 	ld	b, (hl)
   05FB 03                 1259 	inc	bc
   05FC 0A                 1260 	ld	a, (bc)
   05FD 4F                 1261 	ld	c, a
                           1262 ;SpritePlayer.c:87: archer_data->amulet += 1u;
   05FE 21r0Dr00           1263 	ld	hl, #_archer_data
   0601 2A                 1264 	ld	a, (hl+)
   0602 5E                 1265 	ld	e, (hl)
   0603 F8 0D              1266 	ldhl	sp,	#13
   0605 22                 1267 	ld	(hl+), a
   0606 73                 1268 	ld	(hl), e
                           1269 ;SpritePlayer.c:245: archer_data->coins++;
   0607 2B                 1270 	dec	hl
   0608 5E                 1271 	ld	e, (hl)
   0609 23                 1272 	inc	hl
   060A 56                 1273 	ld	d, (hl)
   060B 21 01 00           1274 	ld	hl, #0x0001
   060E 19                 1275 	add	hl, de
   060F 7D                 1276 	ld	a, l
   0610 54                 1277 	ld	d, h
   0611 F8 0F              1278 	ldhl	sp,	#15
   0613 22                 1279 	ld	(hl+), a
   0614 72                 1280 	ld	(hl), d
                           1281 ;SpritePlayer.c:243: switch(dataitem->type){
   0615 79                 1282 	ld	a, c
   0616 3D                 1283 	dec	a
   0617 28 18              1284 	jr	Z,00205$
   0619 79                 1285 	ld	a,c
   061A FE 02              1286 	cp	a,#0x02
   061C CAr94r06           1287 	jp	Z,00208$
   061F FE 03              1288 	cp	a,##0x03
   0621 CArA9r06           1289 	jp	Z,00209$
   0624 FE 07              1290 	cp	a,#0x07
   0626 CArBFr06           1291 	jp	Z,00210$
   0629 D6 0A              1292 	sub	a, #0x0a
   062B CAr0Dr07           1293 	jp	Z,00213$
   062E C3r14r07           1294 	jp	00220$
                           1295 ;SpritePlayer.c:244: case 1u: //coins
   0631                    1296 00205$:
                           1297 ;SpritePlayer.c:245: archer_data->coins++;
   0631 F8 0F              1298 	ldhl	sp,#(16 - 1)
   0633 5E                 1299 	ld	e, (hl)
   0634 23                 1300 	inc	hl
   0635 56                 1301 	ld	d, (hl)
   0636 1A                 1302 	ld	a,(de)
   0637 4F                 1303 	ld	c, a
   0638 0C                 1304 	inc	c
   0639 2B                 1305 	dec	hl
   063A 2A                 1306 	ld	a, (hl+)
   063B 66                 1307 	ld	h, (hl)
   063C 6F                 1308 	ld	l, a
   063D 71                 1309 	ld	(hl), c
                           1310 ;SpritePlayer.c:87: archer_data->amulet += 1u;
   063E 21r0Er00           1311 	ld	hl, #_archer_data + 1
   0641 2B                 1312 	dec	hl
   0642 4E                 1313 	ld	c, (hl)
   0643 23                 1314 	inc	hl
   0644 46                 1315 	ld	b, (hl)
                           1316 ;SpritePlayer.c:245: archer_data->coins++;
   0645 03                 1317 	inc	bc
   0646 F8 0F              1318 	ldhl	sp,	#15
   0648 71                 1319 	ld	(hl), c
   0649 23                 1320 	inc	hl
   064A 70                 1321 	ld	(hl), b
                           1322 ;SpritePlayer.c:246: if (archer_data->coins == 100){
   064B 2B                 1323 	dec	hl
   064C 5E                 1324 	ld	e, (hl)
   064D 23                 1325 	inc	hl
   064E 56                 1326 	ld	d, (hl)
   064F 1A                 1327 	ld	a,(de)
   0650 D6 64              1328 	sub	a, #0x64
   0652 20 19              1329 	jr	NZ,00207$
                           1330 ;SpritePlayer.c:247: archer_data->coins = 0;
   0654 2B                 1331 	dec	hl
   0655 2A                 1332 	ld	a, (hl+)
   0656 66                 1333 	ld	h, (hl)
   0657 6F                 1334 	ld	l, a
   0658 36 00              1335 	ld	(hl), #0x00
                           1336 ;SpritePlayer.c:87: archer_data->amulet += 1u;
   065A 21r0Dr00           1337 	ld	hl, #_archer_data
   065D 2A                 1338 	ld	a, (hl+)
   065E 5E                 1339 	ld	e, (hl)
   065F F8 0F              1340 	ldhl	sp,	#15
   0661 22                 1341 	ld	(hl+), a
   0662 73                 1342 	ld	(hl), e
                           1343 ;SpritePlayer.c:107: archer_data->ups -= 1;
   0663 2B                 1344 	dec	hl
   0664 4E                 1345 	ld	c, (hl)
   0665 23                 1346 	inc	hl
   0666 46                 1347 	ld	b, (hl)
   0667 03                 1348 	inc	bc
   0668 03                 1349 	inc	bc
   0669 03                 1350 	inc	bc
                           1351 ;SpritePlayer.c:248: archer_data->ups += 1;	
   066A 0A                 1352 	ld	a, (bc)
   066B 3C                 1353 	inc	a
   066C 02                 1354 	ld	(bc), a
   066D                    1355 00207$:
                           1356 ;SpritePlayer.c:250: PlayFx(CHANNEL_1, 3, 0x6d, 0x8c, 0x73, 0xff, 0xc7);
   066D 21 C7 00           1357 	ld	hl, #0x00c7
   0670 E5                 1358 	push	hl
   0671 2E FF              1359 	ld	l, #0xff
   0673 E5                 1360 	push	hl
   0674 2E 73              1361 	ld	l, #0x73
   0676 E5                 1362 	push	hl
   0677 2E 8C              1363 	ld	l, #0x8c
   0679 E5                 1364 	push	hl
   067A 2E 6D              1365 	ld	l, #0x6d
   067C E5                 1366 	push	hl
   067D 3E 03              1367 	ld	a, #0x03
   067F F5                 1368 	push	af
   0680 33                 1369 	inc	sp
   0681 AF                 1370 	xor	a, a
   0682 F5                 1371 	push	af
   0683 33                 1372 	inc	sp
   0684 CDr00r00           1373 	call	_PlayFx
   0687 E8 0C              1374 	add	sp, #12
                           1375 ;SpritePlayer.c:251: SpriteManagerRemoveSprite(ispr);
   0689 E1                 1376 	pop	hl
   068A E5                 1377 	push	hl
   068B E5                 1378 	push	hl
   068C CDr00r00           1379 	call	_SpriteManagerRemoveSprite
   068F E8 02              1380 	add	sp, #2
                           1381 ;SpritePlayer.c:252: break;
   0691 C3r14r07           1382 	jp	00220$
                           1383 ;SpritePlayer.c:253: case 2u: //hp
   0694                    1384 00208$:
                           1385 ;SpritePlayer.c:254: archer_data->hp = 100u;
   0694 F8 0D              1386 	ldhl	sp,#(14 - 1)
   0696 4E                 1387 	ld	c, (hl)
   0697 23                 1388 	inc	hl
   0698 46                 1389 	ld	b, (hl)
   0699 03                 1390 	inc	bc
   069A 03                 1391 	inc	bc
   069B 3E 64              1392 	ld	a, #0x64
   069D 02                 1393 	ld	(bc), a
                           1394 ;SpritePlayer.c:255: SpriteManagerRemoveSprite(ispr);
   069E E1                 1395 	pop	hl
   069F E5                 1396 	push	hl
   06A0 E5                 1397 	push	hl
   06A1 CDr00r00           1398 	call	_SpriteManagerRemoveSprite
   06A4 E8 02              1399 	add	sp, #2
                           1400 ;SpritePlayer.c:256: break;
   06A6 C3r14r07           1401 	jp	00220$
                           1402 ;SpritePlayer.c:257: case 3u: //up
   06A9                    1403 00209$:
                           1404 ;SpritePlayer.c:107: archer_data->ups -= 1;
   06A9 F8 0D              1405 	ldhl	sp,#(14 - 1)
   06AB 4E                 1406 	ld	c, (hl)
   06AC 23                 1407 	inc	hl
   06AD 46                 1408 	ld	b, (hl)
   06AE 03                 1409 	inc	bc
   06AF 03                 1410 	inc	bc
   06B0 03                 1411 	inc	bc
                           1412 ;SpritePlayer.c:258: archer_data->ups += 1;
   06B1 0A                 1413 	ld	a, (bc)
   06B2 3C                 1414 	inc	a
   06B3 02                 1415 	ld	(bc), a
                           1416 ;SpritePlayer.c:259: SpriteManagerRemoveSprite(ispr);
   06B4 E1                 1417 	pop	hl
   06B5 E5                 1418 	push	hl
   06B6 E5                 1419 	push	hl
   06B7 CDr00r00           1420 	call	_SpriteManagerRemoveSprite
   06BA E8 02              1421 	add	sp, #2
                           1422 ;SpritePlayer.c:260: break;
   06BC C3r14r07           1423 	jp	00220$
                           1424 ;SpritePlayer.c:261: case 7u: //dcoin
   06BF                    1425 00210$:
                           1426 ;SpritePlayer.c:262: archer_data->coins+=10;
   06BF F8 0F              1427 	ldhl	sp,#(16 - 1)
   06C1 5E                 1428 	ld	e, (hl)
   06C2 23                 1429 	inc	hl
   06C3 56                 1430 	ld	d, (hl)
   06C4 1A                 1431 	ld	a,(de)
   06C5 C6 0A              1432 	add	a, #0x0a
   06C7 4F                 1433 	ld	c, a
   06C8 2B                 1434 	dec	hl
   06C9 2A                 1435 	ld	a, (hl+)
   06CA 66                 1436 	ld	h, (hl)
   06CB 6F                 1437 	ld	l, a
   06CC 71                 1438 	ld	(hl), c
                           1439 ;SpritePlayer.c:87: archer_data->amulet += 1u;
   06CD 21r0Er00           1440 	ld	hl, #_archer_data + 1
   06D0 2B                 1441 	dec	hl
   06D1 4E                 1442 	ld	c, (hl)
   06D2 23                 1443 	inc	hl
   06D3 46                 1444 	ld	b, (hl)
                           1445 ;SpritePlayer.c:245: archer_data->coins++;
   06D4 03                 1446 	inc	bc
   06D5 0A                 1447 	ld	a, (bc)
                           1448 ;SpritePlayer.c:263: if (archer_data->coins >= 100){
   06D6 FE 64              1449 	cp	a, #0x64
   06D8 38 0D              1450 	jr	C,00212$
                           1451 ;SpritePlayer.c:264: archer_data->coins = archer_data->coins - 100;
   06DA C6 9C              1452 	add	a, #0x9c
   06DC 02                 1453 	ld	(bc), a
                           1454 ;SpritePlayer.c:87: archer_data->amulet += 1u;
   06DD 2B                 1455 	dec	hl
   06DE 4E                 1456 	ld	c, (hl)
   06DF 23                 1457 	inc	hl
   06E0 46                 1458 	ld	b, (hl)
                           1459 ;SpritePlayer.c:107: archer_data->ups -= 1;
   06E1 03                 1460 	inc	bc
   06E2 03                 1461 	inc	bc
   06E3 03                 1462 	inc	bc
                           1463 ;SpritePlayer.c:265: archer_data->ups += 1;	
   06E4 0A                 1464 	ld	a, (bc)
   06E5 3C                 1465 	inc	a
   06E6 02                 1466 	ld	(bc), a
   06E7                    1467 00212$:
                           1468 ;SpritePlayer.c:267: PlayFx(CHANNEL_1, 3, 0x6d, 0x8c, 0x73, 0xff, 0xc7);
   06E7 21 C7 00           1469 	ld	hl, #0x00c7
   06EA E5                 1470 	push	hl
   06EB 2E FF              1471 	ld	l, #0xff
   06ED E5                 1472 	push	hl
   06EE 2E 73              1473 	ld	l, #0x73
   06F0 E5                 1474 	push	hl
   06F1 2E 8C              1475 	ld	l, #0x8c
   06F3 E5                 1476 	push	hl
   06F4 2E 6D              1477 	ld	l, #0x6d
   06F6 E5                 1478 	push	hl
   06F7 3E 03              1479 	ld	a, #0x03
   06F9 F5                 1480 	push	af
   06FA 33                 1481 	inc	sp
   06FB AF                 1482 	xor	a, a
   06FC F5                 1483 	push	af
   06FD 33                 1484 	inc	sp
   06FE CDr00r00           1485 	call	_PlayFx
   0701 E8 0C              1486 	add	sp, #12
                           1487 ;SpritePlayer.c:268: SpriteManagerRemoveSprite(ispr);
   0703 E1                 1488 	pop	hl
   0704 E5                 1489 	push	hl
   0705 E5                 1490 	push	hl
   0706 CDr00r00           1491 	call	_SpriteManagerRemoveSprite
   0709 E8 02              1492 	add	sp, #2
                           1493 ;SpritePlayer.c:269: break;
   070B 18 07              1494 	jr	00220$
                           1495 ;SpritePlayer.c:270: case 10u: //scrigno
   070D                    1496 00213$:
                           1497 ;SpritePlayer.c:271: dataitem->collided = 1;
   070D F8 0B              1498 	ldhl	sp,	#11
   070F 2A                 1499 	ld	a, (hl+)
   0710 66                 1500 	ld	h, (hl)
   0711 6F                 1501 	ld	l, a
   0712 36 01              1502 	ld	(hl), #0x01
                           1503 ;SpritePlayer.c:273: }
   0714                    1504 00220$:
                           1505 ;SpritePlayer.c:277: if(ispr->type == SpriteKey) {
   0714 F8 02              1506 	ldhl	sp,#(3 - 1)
   0716 5E                 1507 	ld	e, (hl)
   0717 23                 1508 	inc	hl
   0718 56                 1509 	ld	d, (hl)
   0719 1A                 1510 	ld	a,(de)
   071A D6 04              1511 	sub	a, #0x04
   071C C2r6Fr07           1512 	jp	NZ,00227$
                           1513 ;SpritePlayer.c:278: if(CheckCollision(THIS, ispr)) {
   071F E1                 1514 	pop	hl
   0720 E5                 1515 	push	hl
   0721 E5                 1516 	push	hl
   0722 21r00r00           1517 	ld	hl, #_THIS
   0725 2A                 1518 	ld	a, (hl+)
   0726 66                 1519 	ld	h, (hl)
   0727 6F                 1520 	ld	l, a
   0728 E5                 1521 	push	hl
   0729 CDr00r00           1522 	call	_CheckCollision
   072C E8 04              1523 	add	sp, #4
   072E 7B                 1524 	ld	a, e
   072F B7                 1525 	or	a, a
   0730 CAr6Fr07           1526 	jp	Z, 00227$
                           1527 ;SpritePlayer.c:279: struct ItemInfo* datakey = (struct ItemInfo*)ispr->custom_data;
   0733 F8 09              1528 	ldhl	sp,#(10 - 1)
   0735 4E                 1529 	ld	c, (hl)
   0736 23                 1530 	inc	hl
   0737 46                 1531 	ld	b, (hl)
                           1532 ;SpritePlayer.c:280: switch(datakey->type){
   0738 03                 1533 	inc	bc
   0739 0A                 1534 	ld	a, (bc)
   073A F8 10              1535 	ldhl	sp,	#16
   073C 77                 1536 	ld	(hl), a
                           1537 ;SpritePlayer.c:87: archer_data->amulet += 1u;
   073D 21r0Er00           1538 	ld	hl, #_archer_data + 1
   0740 2B                 1539 	dec	hl
   0741 4E                 1540 	ld	c, (hl)
   0742 23                 1541 	inc	hl
   0743 46                 1542 	ld	b, (hl)
                           1543 ;SpritePlayer.c:282: archer_data->tool = 6;
   0744 03                 1544 	inc	bc
   0745 03                 1545 	inc	bc
   0746 03                 1546 	inc	bc
   0747 03                 1547 	inc	bc
                           1548 ;SpritePlayer.c:280: switch(datakey->type){
   0748 F8 10              1549 	ldhl	sp,	#16
   074A 7E                 1550 	ld	a, (hl)
   074B 3D                 1551 	dec	a
   074C 28 09              1552 	jr	Z,00221$
   074E F8 10              1553 	ldhl	sp,	#16
   0750 7E                 1554 	ld	a, (hl)
   0751 D6 02              1555 	sub	a, #0x02
   0753 28 0F              1556 	jr	Z,00222$
   0755 18 18              1557 	jr	00227$
                           1558 ;SpritePlayer.c:281: case 1: //wrench
   0757                    1559 00221$:
                           1560 ;SpritePlayer.c:282: archer_data->tool = 6;
   0757 3E 06              1561 	ld	a, #0x06
   0759 02                 1562 	ld	(bc), a
                           1563 ;SpritePlayer.c:283: SpriteManagerRemoveSprite(ispr);	
   075A E1                 1564 	pop	hl
   075B E5                 1565 	push	hl
   075C E5                 1566 	push	hl
   075D CDr00r00           1567 	call	_SpriteManagerRemoveSprite
   0760 E8 02              1568 	add	sp, #2
                           1569 ;SpritePlayer.c:284: break;
   0762 18 0B              1570 	jr	00227$
                           1571 ;SpritePlayer.c:285: case 2: //key
   0764                    1572 00222$:
                           1573 ;SpritePlayer.c:286: archer_data->tool = 7;
   0764 3E 07              1574 	ld	a, #0x07
   0766 02                 1575 	ld	(bc), a
                           1576 ;SpritePlayer.c:287: SpriteManagerRemoveSprite(ispr);	
   0767 E1                 1577 	pop	hl
   0768 E5                 1578 	push	hl
   0769 E5                 1579 	push	hl
   076A CDr00r00           1580 	call	_SpriteManagerRemoveSprite
   076D E8 02              1581 	add	sp, #2
                           1582 ;SpritePlayer.c:289: }
   076F                    1583 00227$:
                           1584 ;SpritePlayer.c:292: if(ispr->type == SpritePlatform) {
   076F F8 02              1585 	ldhl	sp,#(3 - 1)
   0771 5E                 1586 	ld	e, (hl)
   0772 23                 1587 	inc	hl
   0773 56                 1588 	ld	d, (hl)
   0774 1A                 1589 	ld	a,(de)
   0775 4F                 1590 	ld	c, a
                           1591 ;SpritePlayer.c:300: THIS->y = ispr->y - ispr->coll_h;
   0776 D1                 1592 	pop	de
   0777 D5                 1593 	push	de
   0778 21 0A 00           1594 	ld	hl, #0x000a
   077B 19                 1595 	add	hl, de
   077C 7D                 1596 	ld	a, l
   077D 54                 1597 	ld	d, h
   077E F8 06              1598 	ldhl	sp,	#6
   0780 22                 1599 	ld	(hl+), a
   0781 72                 1600 	ld	(hl), d
                           1601 ;SpritePlayer.c:292: if(ispr->type == SpritePlatform) {
   0782 79                 1602 	ld	a, c
   0783 D6 02              1603 	sub	a, #0x02
   0785 C2r30r08           1604 	jp	NZ,00235$
                           1605 ;SpritePlayer.c:293: if(CheckCollision(THIS, ispr)) {
   0788 E1                 1606 	pop	hl
   0789 E5                 1607 	push	hl
   078A E5                 1608 	push	hl
   078B 21r00r00           1609 	ld	hl, #_THIS
   078E 2A                 1610 	ld	a, (hl+)
   078F 66                 1611 	ld	h, (hl)
   0790 6F                 1612 	ld	l, a
   0791 E5                 1613 	push	hl
   0792 CDr00r00           1614 	call	_CheckCollision
   0795 E8 04              1615 	add	sp, #4
   0797 7B                 1616 	ld	a, e
   0798 B7                 1617 	or	a, a
   0799 CAr30r08           1618 	jp	Z, 00235$
                           1619 ;SpritePlayer.c:294: if (archer_accel_y > 0){//se sono in salita non collido !
   079C 21r08r00           1620 	ld	hl, #_archer_accel_y
   079F 3E 00              1621 	ld	a, #0x00
   07A1 96                 1622 	sub	a, (hl)
   07A2 23                 1623 	inc	hl
   07A3 3E 00              1624 	ld	a, #0x00
   07A5 9E                 1625 	sbc	a, (hl)
   07A6 3E 00              1626 	ld	a, #0x00
   07A8 57                 1627 	ld	d, a
   07A9 5E                 1628 	ld	e, (hl)
   07AA CB 7B              1629 	bit	7, e
   07AC 28 07              1630 	jr	Z,00827$
   07AE CB 7A              1631 	bit	7, d
   07B0 20 08              1632 	jr	NZ,00828$
   07B2 BF                 1633 	cp	a, a
   07B3 18 05              1634 	jr	00828$
   07B5                    1635 00827$:
   07B5 CB 7A              1636 	bit	7, d
   07B7 28 01              1637 	jr	Z,00828$
   07B9 37                 1638 	scf
   07BA                    1639 00828$:
   07BA D2r30r08           1640 	jp	NC, 00235$
                           1641 ;SpritePlayer.c:295: archer_accel_y = 0;
   07BD 21r08r00           1642 	ld	hl, #_archer_accel_y
   07C0 36 00              1643 	ld	(hl), #0x00
   07C2 23                 1644 	inc	hl
   07C3 36 00              1645 	ld	(hl), #0x00
                           1646 ;SpritePlayer.c:296: struct PlatformInfo* datap = (struct PlatformInfo*)ispr->custom_data;
   07C5 F8 04              1647 	ldhl	sp,#(5 - 1)
   07C7 4E                 1648 	ld	c, (hl)
   07C8 23                 1649 	inc	hl
   07C9 46                 1650 	ld	b, (hl)
                           1651 ;SpritePlayer.c:297: platform_vx = datap->vx;
   07CA 03                 1652 	inc	bc
   07CB 03                 1653 	inc	bc
   07CC 03                 1654 	inc	bc
   07CD 03                 1655 	inc	bc
   07CE 0A                 1656 	ld	a, (bc)
   07CF 21r04r00           1657 	ld	hl, #_platform_vx
   07D2 77                 1658 	ld	(hl), a
                           1659 ;SpritePlayer.c:298: if(archer_state != STATE_NORMAL & archer_state != STATE_NORMAL_PLATFORM){
   07D3 21r00r00           1660 	ld	hl, #_archer_state
   07D6 7E                 1661 	ld	a, (hl)
   07D7 D6 01              1662 	sub	a,#0x01
   07D9 3E 00              1663 	ld	a, #0x00
   07DB 17                 1664 	rla
   07DC EE 01              1665 	xor	a, #0x01
   07DE 4F                 1666 	ld	c, a
   07DF 7E                 1667 	ld	a, (hl)
   07E0 3D                 1668 	dec	a
   07E1 3E 01              1669 	ld	a, #0x01
   07E3 28 01              1670 	jr	Z,00830$
   07E5 AF                 1671 	xor	a, a
   07E6                    1672 00830$:
   07E6 EE 01              1673 	xor	a, #0x01
   07E8 A1                 1674 	and	a, c
   07E9 CB 47              1675 	bit	0, a
   07EB CAr30r08           1676 	jp	Z, 00235$
                           1677 ;SpritePlayer.c:299: archer_state = STATE_NORMAL_PLATFORM;
   07EE 21r00r00           1678 	ld	hl, #_archer_state
   07F1 36 01              1679 	ld	(hl), #0x01
                           1680 ;SpritePlayer.c:300: THIS->y = ispr->y - ispr->coll_h;
   07F3 21r01r00           1681 	ld	hl, #_THIS + 1
   07F6 2B                 1682 	dec	hl
   07F7 4E                 1683 	ld	c, (hl)
   07F8 23                 1684 	inc	hl
   07F9 46                 1685 	ld	b, (hl)
   07FA 21 0A 00           1686 	ld	hl, #0x000a
   07FD 09                 1687 	add	hl, bc
   07FE 7D                 1688 	ld	a, l
   07FF 54                 1689 	ld	d, h
   0800 F8 0D              1690 	ldhl	sp,	#13
   0802 22                 1691 	ld	(hl+), a
   0803 72                 1692 	ld	(hl), d
   0804 F8 06              1693 	ldhl	sp,#(7 - 1)
   0806 5E                 1694 	ld	e, (hl)
   0807 23                 1695 	inc	hl
   0808 56                 1696 	ld	d, (hl)
   0809 1A                 1697 	ld	a,(de)
   080A F8 0F              1698 	ldhl	sp,	#15
   080C 22                 1699 	ld	(hl+), a
   080D 13                 1700 	inc	de
   080E 1A                 1701 	ld	a, (de)
   080F 77                 1702 	ld	(hl), a
   0810 D1                 1703 	pop	de
   0811 D5                 1704 	push	de
   0812 21 10 00           1705 	ld	hl, #0x0010
   0815 19                 1706 	add	hl, de
   0816 4D                 1707 	ld	c, l
   0817 44                 1708 	ld	b, h
   0818 0A                 1709 	ld	a, (bc)
   0819 4F                 1710 	ld	c, a
   081A 06 00              1711 	ld	b, #0x00
   081C F8 0F              1712 	ldhl	sp,#(16 - 1)
   081E 5E                 1713 	ld	e, (hl)
   081F 23                 1714 	inc	hl
   0820 56                 1715 	ld	d, (hl)
   0821 7B                 1716 	ld	a, e
   0822 91                 1717 	sub	a, c
   0823 5F                 1718 	ld	e, a
   0824 7A                 1719 	ld	a, d
   0825 98                 1720 	sbc	a, b
   0826 47                 1721 	ld	b, a
   0827 4B                 1722 	ld	c, e
   0828 F8 0D              1723 	ldhl	sp,	#13
   082A 2A                 1724 	ld	a, (hl+)
   082B 66                 1725 	ld	h, (hl)
   082C 6F                 1726 	ld	l, a
   082D 71                 1727 	ld	(hl), c
   082E 23                 1728 	inc	hl
   082F 70                 1729 	ld	(hl), b
   0830                    1730 00235$:
                           1731 ;SpritePlayer.c:305: if(ispr->type == SpriteEnemy || ispr->type == SpriteScorpion || ispr->type == SpritePorcupine || ispr->type == SpriteWolf) { //collision con l' enemy
   0830 F8 02              1732 	ldhl	sp,#(3 - 1)
   0832 5E                 1733 	ld	e, (hl)
   0833 23                 1734 	inc	hl
   0834 56                 1735 	ld	d, (hl)
   0835 1A                 1736 	ld	a,(de)
   0836 FE 06              1737 	cp	a, #0x06
   0838 28 0D              1738 	jr	Z,00256$
   083A FE 07              1739 	cp	a, #0x07
   083C 28 09              1740 	jr	Z,00256$
   083E FE 08              1741 	cp	a, #0x08
   0840 28 05              1742 	jr	Z,00256$
   0842 D6 09              1743 	sub	a, #0x09
   0844 C2rD6r09           1744 	jp	NZ,00257$
   0847                    1745 00256$:
                           1746 ;SpritePlayer.c:306: if(CheckCollision(THIS, ispr) & archer_state != STATE_HIT) {
   0847 E1                 1747 	pop	hl
   0848 E5                 1748 	push	hl
   0849 E5                 1749 	push	hl
   084A 21r00r00           1750 	ld	hl, #_THIS
   084D 2A                 1751 	ld	a, (hl+)
   084E 66                 1752 	ld	h, (hl)
   084F 6F                 1753 	ld	l, a
   0850 E5                 1754 	push	hl
   0851 CDr00r00           1755 	call	_CheckCollision
   0854 E8 04              1756 	add	sp, #4
   0856 21r00r00           1757 	ld	hl, #_archer_state
   0859 7E                 1758 	ld	a, (hl)
   085A D6 04              1759 	sub	a, #0x04
   085C 3E 01              1760 	ld	a, #0x01
   085E 28 01              1761 	jr	Z,00837$
   0860 AF                 1762 	xor	a, a
   0861                    1763 00837$:
   0861 EE 01              1764 	xor	a, #0x01
   0863 A3                 1765 	and	a,e
   0864 CArD6r09           1766 	jp	Z, 00257$
                           1767 ;SpritePlayer.c:307: struct EnemyInfo* dataenemy = (struct EnemyInfo*)ispr->custom_data;
   0867 F8 04              1768 	ldhl	sp,	#4
   0869 2A                 1769 	ld	a, (hl+)
   086A 5E                 1770 	ld	e, (hl)
   086B F8 08              1771 	ldhl	sp,	#8
   086D 22                 1772 	ld	(hl+), a
   086E 73                 1773 	ld	(hl), e
                           1774 ;SpritePlayer.c:308: if (dataenemy->enemy_state == ENEMY_STATE_DEAD){
   086F 2B                 1775 	dec	hl
   0870 4E                 1776 	ld	c, (hl)
   0871 23                 1777 	inc	hl
   0872 46                 1778 	ld	b, (hl)
   0873 03                 1779 	inc	bc
   0874 03                 1780 	inc	bc
   0875 0A                 1781 	ld	a, (bc)
   0876 D6 03              1782 	sub	a, #0x03
   0878 CAr83r0B           1783 	jp	Z,00281$
   087B 18 03              1784 	jr	00237$
                           1785 ;SpritePlayer.c:309: return;
   087D C3r83r0B           1786 	jp	00281$
   0880                    1787 00237$:
                           1788 ;SpritePlayer.c:311: UINT8 being_hit = 1;
   0880 F8 0A              1789 	ldhl	sp,	#10
   0882 36 01              1790 	ld	(hl), #0x01
                           1791 ;SpritePlayer.c:312: if (KEY_PRESSED(J_DOWN) & ispr->type != SpriteWolf){ //se mi sto riparando e lo sono girato dove serve
   0884 21r00r00           1792 	ld	hl, #_keys
   0887 4E                 1793 	ld	c, (hl)
   0888 06 00              1794 	ld	b, #0x00
   088A 79                 1795 	ld	a, c
   088B E6 08              1796 	and	a, #0x08
   088D F8 0F              1797 	ldhl	sp,	#15
   088F 22                 1798 	ld	(hl+), a
   0890 36 00              1799 	ld	(hl), #0x00
   0892 F8 02              1800 	ldhl	sp,#(3 - 1)
   0894 5E                 1801 	ld	e, (hl)
   0895 23                 1802 	inc	hl
   0896 56                 1803 	ld	d, (hl)
   0897 1A                 1804 	ld	a,(de)
   0898 D6 09              1805 	sub	a, #0x09
   089A 3E 01              1806 	ld	a, #0x01
   089C 28 01              1807 	jr	Z,00841$
   089E AF                 1808 	xor	a, a
   089F                    1809 00841$:
   089F EE 01              1810 	xor	a, #0x01
   08A1 4F                 1811 	ld	c, a
   08A2 06 00              1812 	ld	b, #0x00
                           1813 ;SpritePlayer.c:313: if (ispr->x < THIS->x){
   08A4 D1                 1814 	pop	de
   08A5 D5                 1815 	push	de
   08A6 21 08 00           1816 	ld	hl, #0x0008
   08A9 19                 1817 	add	hl, de
   08AA 7D                 1818 	ld	a, l
   08AB 54                 1819 	ld	d, h
   08AC F8 0B              1820 	ldhl	sp,	#11
   08AE 22                 1821 	ld	(hl+), a
   08AF 72                 1822 	ld	(hl), d
                           1823 ;SpritePlayer.c:312: if (KEY_PRESSED(J_DOWN) & ispr->type != SpriteWolf){ //se mi sto riparando e lo sono girato dove serve
   08B0 F8 0F              1824 	ldhl	sp,	#15
   08B2 7E                 1825 	ld	a, (hl)
   08B3 A1                 1826 	and	a, c
   08B4 4F                 1827 	ld	c, a
   08B5 23                 1828 	inc	hl
   08B6 7E                 1829 	ld	a, (hl)
   08B7 A0                 1830 	and	a, b
   08B8 B1                 1831 	or	a, c
   08B9 CAr39r09           1832 	jp	Z, 00246$
                           1833 ;SpritePlayer.c:313: if (ispr->x < THIS->x){
   08BC F8 0B              1834 	ldhl	sp,#(12 - 1)
   08BE 5E                 1835 	ld	e, (hl)
   08BF 23                 1836 	inc	hl
   08C0 56                 1837 	ld	d, (hl)
   08C1 1A                 1838 	ld	a,(de)
   08C2 23                 1839 	inc	hl
   08C3 22                 1840 	ld	(hl+), a
   08C4 13                 1841 	inc	de
   08C5 1A                 1842 	ld	a, (de)
   08C6 77                 1843 	ld	(hl), a
                           1844 ;SpritePlayer.c:145: THIS->coll_x = 8;
   08C7 21r01r00           1845 	ld	hl, #_THIS + 1
   08CA 2B                 1846 	dec	hl
   08CB 4E                 1847 	ld	c, (hl)
   08CC 23                 1848 	inc	hl
   08CD 46                 1849 	ld	b, (hl)
                           1850 ;SpritePlayer.c:313: if (ispr->x < THIS->x){
   08CE 21 08 00           1851 	ld	hl, #0x0008
   08D1 09                 1852 	add	hl, bc
   08D2 7D                 1853 	ld	a, l
   08D3 54                 1854 	ld	d, h
   08D4 F8 0F              1855 	ldhl	sp,	#15
   08D6 22                 1856 	ld	(hl+), a
   08D7 72                 1857 	ld	(hl), d
   08D8 2B                 1858 	dec	hl
   08D9 5E                 1859 	ld	e, (hl)
   08DA 23                 1860 	inc	hl
   08DB 56                 1861 	ld	d, (hl)
   08DC 1A                 1862 	ld	a,(de)
   08DD 2B                 1863 	dec	hl
   08DE 22                 1864 	ld	(hl+), a
   08DF 13                 1865 	inc	de
   08E0 1A                 1866 	ld	a, (de)
   08E1 77                 1867 	ld	(hl), a
                           1868 ;SpritePlayer.c:314: if (SPRITE_GET_VMIRROR(THIS)){//mi sto riparando bene	
   08E2 21 0C 00           1869 	ld	hl, #0x000c
   08E5 09                 1870 	add	hl, bc
   08E6 4D                 1871 	ld	c, l
   08E7 44                 1872 	ld	b, h
   08E8 0A                 1873 	ld	a, (bc)
   08E9 E6 20              1874 	and	a, #0x20
   08EB 4F                 1875 	ld	c, a
   08EC 06 00              1876 	ld	b, #0x00
                           1877 ;SpritePlayer.c:313: if (ispr->x < THIS->x){
   08EE F8 0D              1878 	ldhl	sp,	#13
   08F0 5D                 1879 	ld	e, l
   08F1 54                 1880 	ld	d, h
   08F2 F8 0F              1881 	ldhl	sp,	#15
   08F4 1A                 1882 	ld	a, (de)
   08F5 96                 1883 	sub	a, (hl)
   08F6 23                 1884 	inc	hl
   08F7 13                 1885 	inc	de
   08F8 1A                 1886 	ld	a, (de)
   08F9 9E                 1887 	sbc	a, (hl)
   08FA 30 22              1888 	jr	NC,00243$
                           1889 ;SpritePlayer.c:314: if (SPRITE_GET_VMIRROR(THIS)){//mi sto riparando bene	
   08FC 78                 1890 	ld	a, b
   08FD B1                 1891 	or	a, c
   08FE CAr39r09           1892 	jp	Z, 00246$
                           1893 ;SpritePlayer.c:315: ispr->x -= 16;
   0901 F8 0D              1894 	ldhl	sp,#(14 - 1)
   0903 5E                 1895 	ld	e, (hl)
   0904 23                 1896 	inc	hl
   0905 56                 1897 	ld	d, (hl)
   0906 21 10 00           1898 	ld	hl, #0x0010
   0909 7B                 1899 	ld	a, e
   090A 95                 1900 	sub	a, l
   090B 5F                 1901 	ld	e, a
   090C 7A                 1902 	ld	a, d
   090D 9C                 1903 	sbc	a, h
   090E 47                 1904 	ld	b, a
   090F 4B                 1905 	ld	c, e
   0910 F8 0B              1906 	ldhl	sp,	#11
   0912 2A                 1907 	ld	a, (hl+)
   0913 66                 1908 	ld	h, (hl)
   0914 6F                 1909 	ld	l, a
   0915 71                 1910 	ld	(hl), c
   0916 23                 1911 	inc	hl
   0917 70                 1912 	ld	(hl), b
                           1913 ;SpritePlayer.c:316: being_hit = 0;
   0918 AF                 1914 	xor	a, a
   0919 F8 0A              1915 	ldhl	sp,	#10
   091B 77                 1916 	ld	(hl), a
   091C 18 1B              1917 	jr	00246$
   091E                    1918 00243$:
                           1919 ;SpritePlayer.c:319: if (!SPRITE_GET_VMIRROR(THIS)){
   091E 78                 1920 	ld	a, b
   091F B1                 1921 	or	a, c
   0920 20 17              1922 	jr	NZ,00246$
                           1923 ;SpritePlayer.c:320: ispr->x += 16;
   0922 F8 0D              1924 	ldhl	sp,#(14 - 1)
   0924 5E                 1925 	ld	e, (hl)
   0925 23                 1926 	inc	hl
   0926 56                 1927 	ld	d, (hl)
   0927 21 10 00           1928 	ld	hl, #0x0010
   092A 19                 1929 	add	hl, de
   092B 4D                 1930 	ld	c, l
   092C 44                 1931 	ld	b, h
   092D F8 0B              1932 	ldhl	sp,	#11
   092F 2A                 1933 	ld	a, (hl+)
   0930 66                 1934 	ld	h, (hl)
   0931 6F                 1935 	ld	l, a
   0932 71                 1936 	ld	(hl), c
   0933 23                 1937 	inc	hl
   0934 70                 1938 	ld	(hl), b
                           1939 ;SpritePlayer.c:321: being_hit = 0;
   0935 AF                 1940 	xor	a, a
   0936 F8 0A              1941 	ldhl	sp,	#10
   0938 77                 1942 	ld	(hl), a
   0939                    1943 00246$:
                           1944 ;SpritePlayer.c:325: if (being_hit & archer_state != STATE_DEAD){
   0939 21r00r00           1945 	ld	hl, #_archer_state
   093C 7E                 1946 	ld	a, (hl)
   093D D6 06              1947 	sub	a, #0x06
   093F 3E 01              1948 	ld	a, #0x01
   0941 28 01              1949 	jr	Z,00843$
   0943 AF                 1950 	xor	a, a
   0944                    1951 00843$:
   0944 EE 01              1952 	xor	a, #0x01
   0946 F8 0A              1953 	ldhl	sp,	#10
   0948 4E                 1954 	ld	c, (hl)
   0949 A1                 1955 	and	a,c
   094A CArD6r09           1956 	jp	Z, 00257$
                           1957 ;SpritePlayer.c:87: archer_data->amulet += 1u;
   094D 21r0Er00           1958 	ld	hl, #_archer_data + 1
   0950 2B                 1959 	dec	hl
   0951 4E                 1960 	ld	c, (hl)
   0952 23                 1961 	inc	hl
   0953 46                 1962 	ld	b, (hl)
                           1963 ;SpritePlayer.c:254: archer_data->hp = 100u;
   0954 03                 1964 	inc	bc
   0955 03                 1965 	inc	bc
   0956 F8 0F              1966 	ldhl	sp,	#15
   0958 71                 1967 	ld	(hl), c
   0959 23                 1968 	inc	hl
   095A 70                 1969 	ld	(hl), b
                           1970 ;SpritePlayer.c:326: archer_data->hp -=  dataenemy->enemydamage;
   095B 2B                 1971 	dec	hl
   095C 5E                 1972 	ld	e, (hl)
   095D 23                 1973 	inc	hl
   095E 56                 1974 	ld	d, (hl)
   095F 1A                 1975 	ld	a,(de)
   0960 4F                 1976 	ld	c, a
   0961 F8 08              1977 	ldhl	sp,#(9 - 1)
   0963 5E                 1978 	ld	e, (hl)
   0964 23                 1979 	inc	hl
   0965 56                 1980 	ld	d, (hl)
   0966 21 06 00           1981 	ld	hl, #0x0006
   0969 19                 1982 	add	hl, de
   096A 45                 1983 	ld	b,l
   096B 7C                 1984 	ld	a,h
   096C 46                 1985 	ld	b, (hl)
   096D 79                 1986 	ld	a, c
   096E 90                 1987 	sub	a, b
   096F 4F                 1988 	ld	c, a
   0970 F8 0F              1989 	ldhl	sp,	#15
   0972 2A                 1990 	ld	a, (hl+)
   0973 66                 1991 	ld	h, (hl)
   0974 6F                 1992 	ld	l, a
   0975 71                 1993 	ld	(hl), c
                           1994 ;SpritePlayer.c:87: archer_data->amulet += 1u;
   0976 21r0Er00           1995 	ld	hl, #_archer_data + 1
   0979 2B                 1996 	dec	hl
   097A 4E                 1997 	ld	c, (hl)
   097B 23                 1998 	inc	hl
   097C 46                 1999 	ld	b, (hl)
                           2000 ;SpritePlayer.c:254: archer_data->hp = 100u;
   097D 03                 2001 	inc	bc
   097E 03                 2002 	inc	bc
                           2003 ;SpritePlayer.c:327: if (archer_data->hp <= 0){
   097F 0A                 2004 	ld	a, (bc)
   0980 F8 10              2005 	ldhl	sp,	#16
   0982 77                 2006 	ld	(hl),a
   0983 5F                 2007 	ld	e, a
   0984 3E 00              2008 	ld	a, #0x00
   0986 57                 2009 	ld	d, a
   0987 AF                 2010 	xor	a, a
   0988 96                 2011 	sub	a, (hl)
   0989 CB 7B              2012 	bit	7, e
   098B 28 07              2013 	jr	Z,00844$
   098D CB 7A              2014 	bit	7, d
   098F 20 08              2015 	jr	NZ,00845$
   0991 BF                 2016 	cp	a, a
   0992 18 05              2017 	jr	00845$
   0994                    2018 00844$:
   0994 CB 7A              2019 	bit	7, d
   0996 28 01              2020 	jr	Z,00845$
   0998 37                 2021 	scf
   0999                    2022 00845$:
   0999 38 05              2023 	jr	C,00248$
                           2024 ;SpritePlayer.c:328: archer_data->hp = 0;
   099B AF                 2025 	xor	a, a
   099C 02                 2026 	ld	(bc), a
                           2027 ;SpritePlayer.c:329: Die();
   099D CDr86r0B           2028 	call	_Die
   09A0                    2029 00248$:
                           2030 ;SpritePlayer.c:331: Hit();
   09A0 CDrF8r0E           2031 	call	_Hit
                           2032 ;SpritePlayer.c:332: if (ispr->x < THIS->x){
   09A3 F8 0B              2033 	ldhl	sp,#(12 - 1)
   09A5 5E                 2034 	ld	e, (hl)
   09A6 23                 2035 	inc	hl
   09A7 56                 2036 	ld	d, (hl)
   09A8 1A                 2037 	ld	a,(de)
   09A9 F8 0F              2038 	ldhl	sp,	#15
   09AB 22                 2039 	ld	(hl+), a
   09AC 13                 2040 	inc	de
   09AD 1A                 2041 	ld	a, (de)
   09AE 77                 2042 	ld	(hl), a
   09AF 21r00r00           2043 	ld	hl, #_THIS
   09B2 46                 2044 	ld	b, (hl)
   09B3 23                 2045 	inc	hl
   09B4 4E                 2046 	ld	c, (hl)
   09B5 78                 2047 	ld	a, b
   09B6 C6 08              2048 	add	a, #0x08
   09B8 47                 2049 	ld	b, a
   09B9 30 01              2050 	jr	NC,00846$
   09BB 0C                 2051 	inc	c
   09BC                    2052 00846$:
   09BC 68                 2053 	ld	l, b
   09BD 61                 2054 	ld	h, c
   09BE 4E                 2055 	ld	c, (hl)
   09BF 23                 2056 	inc	hl
   09C0 46                 2057 	ld	b, (hl)
   09C1 F8 0F              2058 	ldhl	sp,	#15
   09C3 7E                 2059 	ld	a, (hl)
   09C4 91                 2060 	sub	a, c
   09C5 23                 2061 	inc	hl
   09C6 7E                 2062 	ld	a, (hl)
   09C7 98                 2063 	sbc	a, b
   09C8 30 07              2064 	jr	NC,00250$
                           2065 ;SpritePlayer.c:333: platform_vx = 1;
   09CA 21r04r00           2066 	ld	hl, #_platform_vx
   09CD 36 01              2067 	ld	(hl), #0x01
   09CF 18 05              2068 	jr	00257$
   09D1                    2069 00250$:
                           2070 ;SpritePlayer.c:335: platform_vx = -1;
   09D1 21r04r00           2071 	ld	hl, #_platform_vx
   09D4 36 FF              2072 	ld	(hl), #0xff
   09D6                    2073 00257$:
                           2074 ;SpritePlayer.c:340: if(ispr->type == SpriteArrow) {
   09D6 F8 02              2075 	ldhl	sp,#(3 - 1)
   09D8 5E                 2076 	ld	e, (hl)
   09D9 23                 2077 	inc	hl
   09DA 56                 2078 	ld	d, (hl)
   09DB 1A                 2079 	ld	a,(de)
   09DC 3D                 2080 	dec	a
   09DD C2r5Dr0B           2081 	jp	NZ,00280$
                           2082 ;SpritePlayer.c:341: if(CheckCollision(THIS, ispr)) {
   09E0 E1                 2083 	pop	hl
   09E1 E5                 2084 	push	hl
   09E2 E5                 2085 	push	hl
   09E3 21r00r00           2086 	ld	hl, #_THIS
   09E6 2A                 2087 	ld	a, (hl+)
   09E7 66                 2088 	ld	h, (hl)
   09E8 6F                 2089 	ld	l, a
   09E9 E5                 2090 	push	hl
   09EA CDr00r00           2091 	call	_CheckCollision
   09ED E8 04              2092 	add	sp, #4
   09EF 7B                 2093 	ld	a, e
   09F0 B7                 2094 	or	a, a
   09F1 CAr5Dr0B           2095 	jp	Z, 00280$
                           2096 ;SpritePlayer.c:342: struct ArrowInfo* arrowdata = (struct ArrowInfo*)ispr->custom_data;
   09F4 F8 04              2097 	ldhl	sp,	#4
   09F6 2A                 2098 	ld	a, (hl+)
   09F7 5E                 2099 	ld	e, (hl)
   09F8 F8 0F              2100 	ldhl	sp,	#15
   09FA 22                 2101 	ld	(hl+), a
   09FB 73                 2102 	ld	(hl), e
                           2103 ;SpritePlayer.c:343: if (arrowdata->type == 6u){ //spine from porcupine
   09FC 2B                 2104 	dec	hl
   09FD 4E                 2105 	ld	c, (hl)
   09FE 23                 2106 	inc	hl
   09FF 46                 2107 	ld	b, (hl)
   0A00 69                 2108 	ld	l, c
   0A01 60                 2109 	ld	h, b
   0A02 7E                 2110 	ld	a, (hl)
   0A03 E6 0F              2111 	and	a, #0x0f
   0A05 D6 06              2112 	sub	a, #0x06
   0A07 C2r73r0A           2113 	jp	NZ,00266$
                           2114 ;SpritePlayer.c:344: if(!KEY_PRESSED(J_DOWN)){
   0A0A 21r00r00           2115 	ld	hl, #_keys
   0A0D 7E                 2116 	ld	a, (hl)
   0A0E CB 5F              2117 	bit	3, a
   0A10 C2r68r0A           2118 	jp	NZ,00264$
                           2119 ;SpritePlayer.c:87: archer_data->amulet += 1u;
   0A13 21r0Er00           2120 	ld	hl, #_archer_data + 1
   0A16 2B                 2121 	dec	hl
   0A17 4E                 2122 	ld	c, (hl)
   0A18 23                 2123 	inc	hl
   0A19 46                 2124 	ld	b, (hl)
                           2125 ;SpritePlayer.c:254: archer_data->hp = 100u;
   0A1A 03                 2126 	inc	bc
   0A1B 03                 2127 	inc	bc
   0A1C F8 0D              2128 	ldhl	sp,	#13
   0A1E 71                 2129 	ld	(hl), c
   0A1F 23                 2130 	inc	hl
   0A20 70                 2131 	ld	(hl), b
                           2132 ;SpritePlayer.c:345: archer_data->hp -=  arrowdata->arrowdamage;
   0A21 2B                 2133 	dec	hl
   0A22 5E                 2134 	ld	e, (hl)
   0A23 23                 2135 	inc	hl
   0A24 56                 2136 	ld	d, (hl)
   0A25 1A                 2137 	ld	a,(de)
   0A26 4F                 2138 	ld	c, a
   0A27 23                 2139 	inc	hl
   0A28 5E                 2140 	ld	e, (hl)
   0A29 23                 2141 	inc	hl
   0A2A 56                 2142 	ld	d, (hl)
   0A2B 21 04 00           2143 	ld	hl, #0x0004
   0A2E 19                 2144 	add	hl, de
   0A2F 45                 2145 	ld	b,l
   0A30 7C                 2146 	ld	a,h
   0A31 46                 2147 	ld	b, (hl)
   0A32 79                 2148 	ld	a, c
   0A33 90                 2149 	sub	a, b
   0A34 4F                 2150 	ld	c, a
   0A35 F8 0D              2151 	ldhl	sp,	#13
   0A37 2A                 2152 	ld	a, (hl+)
   0A38 66                 2153 	ld	h, (hl)
   0A39 6F                 2154 	ld	l, a
   0A3A 71                 2155 	ld	(hl), c
                           2156 ;SpritePlayer.c:87: archer_data->amulet += 1u;
   0A3B 21r0Er00           2157 	ld	hl, #_archer_data + 1
   0A3E 2B                 2158 	dec	hl
   0A3F 4E                 2159 	ld	c, (hl)
   0A40 23                 2160 	inc	hl
   0A41 46                 2161 	ld	b, (hl)
                           2162 ;SpritePlayer.c:254: archer_data->hp = 100u;
   0A42 03                 2163 	inc	bc
   0A43 03                 2164 	inc	bc
                           2165 ;SpritePlayer.c:346: if (archer_data->hp <= 0){
   0A44 0A                 2166 	ld	a, (bc)
   0A45 F8 11              2167 	ldhl	sp,	#17
   0A47 77                 2168 	ld	(hl),a
   0A48 5F                 2169 	ld	e, a
   0A49 3E 00              2170 	ld	a, #0x00
   0A4B 57                 2171 	ld	d, a
   0A4C AF                 2172 	xor	a, a
   0A4D 96                 2173 	sub	a, (hl)
   0A4E CB 7B              2174 	bit	7, e
   0A50 28 07              2175 	jr	Z,00853$
   0A52 CB 7A              2176 	bit	7, d
   0A54 20 08              2177 	jr	NZ,00854$
   0A56 BF                 2178 	cp	a, a
   0A57 18 05              2179 	jr	00854$
   0A59                    2180 00853$:
   0A59 CB 7A              2181 	bit	7, d
   0A5B 28 01              2182 	jr	Z,00854$
   0A5D 37                 2183 	scf
   0A5E                    2184 00854$:
   0A5E 38 05              2185 	jr	C,00262$
                           2186 ;SpritePlayer.c:347: archer_data->hp = 0;
   0A60 AF                 2187 	xor	a, a
   0A61 02                 2188 	ld	(bc), a
                           2189 ;SpritePlayer.c:348: Die();
   0A62 CDr86r0B           2190 	call	_Die
   0A65                    2191 00262$:
                           2192 ;SpritePlayer.c:350: Hit();
   0A65 CDrF8r0E           2193 	call	_Hit
   0A68                    2194 00264$:
                           2195 ;SpritePlayer.c:352: SpriteManagerRemoveSprite(ispr);
   0A68 E1                 2196 	pop	hl
   0A69 E5                 2197 	push	hl
   0A6A E5                 2198 	push	hl
   0A6B CDr00r00           2199 	call	_SpriteManagerRemoveSprite
   0A6E E8 02              2200 	add	sp, #2
                           2201 ;SpritePlayer.c:353: return;
   0A70 C3r83r0B           2202 	jp	00281$
   0A73                    2203 00266$:
                           2204 ;SpritePlayer.c:355: struct ArrowInfo* datap = (struct ArrowInfo*)ispr->custom_data;
   0A73 F8 04              2205 	ldhl	sp,#(5 - 1)
   0A75 4E                 2206 	ld	c, (hl)
   0A76 23                 2207 	inc	hl
   0A77 46                 2208 	ld	b, (hl)
   0A78 F8 0C              2209 	ldhl	sp,	#12
   0A7A 71                 2210 	ld	(hl), c
   0A7B 23                 2211 	inc	hl
   0A7C 70                 2212 	ld	(hl), b
                           2213 ;SpritePlayer.c:356: if (datap->arrowdir != 1){return;}//guardo solo se è orizzontale
   0A7D 2B                 2214 	dec	hl
   0A7E 4E                 2215 	ld	c, (hl)
   0A7F 23                 2216 	inc	hl
   0A80 46                 2217 	ld	b, (hl)
   0A81 03                 2218 	inc	bc
   0A82 03                 2219 	inc	bc
   0A83 03                 2220 	inc	bc
   0A84 0A                 2221 	ld	a, (bc)
   0A85 3D                 2222 	dec	a
   0A86 C2r83r0B           2223 	jp	NZ,00281$
                           2224 ;SpritePlayer.c:357: if (archer_accel_y > 0 & THIS->y < (ispr->y-4)){//se sono in salita non collido !
   0A89 21r08r00           2225 	ld	hl, #_archer_accel_y
   0A8C 3E 00              2226 	ld	a, #0x00
   0A8E 96                 2227 	sub	a, (hl)
   0A8F 23                 2228 	inc	hl
   0A90 3E 00              2229 	ld	a, #0x00
   0A92 9E                 2230 	sbc	a, (hl)
   0A93 3E 00              2231 	ld	a, #0x00
   0A95 57                 2232 	ld	d, a
   0A96 5E                 2233 	ld	e, (hl)
   0A97 CB 7B              2234 	bit	7, e
   0A99 28 07              2235 	jr	Z,00856$
   0A9B CB 7A              2236 	bit	7, d
   0A9D 20 08              2237 	jr	NZ,00857$
   0A9F BF                 2238 	cp	a, a
   0AA0 18 05              2239 	jr	00857$
   0AA2                    2240 00856$:
   0AA2 CB 7A              2241 	bit	7, d
   0AA4 28 01              2242 	jr	Z,00857$
   0AA6 37                 2243 	scf
   0AA7                    2244 00857$:
   0AA7 3E 00              2245 	ld	a, #0x00
   0AA9 17                 2246 	rla
   0AAA F8 0E              2247 	ldhl	sp,	#14
   0AAC 77                 2248 	ld	(hl), a
   0AAD 21r00r00           2249 	ld	hl, #_THIS
   0AB0 46                 2250 	ld	b, (hl)
   0AB1 23                 2251 	inc	hl
   0AB2 4E                 2252 	ld	c, (hl)
   0AB3 78                 2253 	ld	a, b
   0AB4 C6 0A              2254 	add	a, #0x0a
   0AB6 47                 2255 	ld	b, a
   0AB7 30 01              2256 	jr	NC,00858$
   0AB9 0C                 2257 	inc	c
   0ABA                    2258 00858$:
   0ABA 58                 2259 	ld	e, b
   0ABB 51                 2260 	ld	d, c
   0ABC 1A                 2261 	ld	a,(de)
   0ABD F8 0F              2262 	ldhl	sp,	#15
   0ABF 22                 2263 	ld	(hl+), a
   0AC0 13                 2264 	inc	de
   0AC1 1A                 2265 	ld	a, (de)
   0AC2 77                 2266 	ld	(hl), a
   0AC3 F8 06              2267 	ldhl	sp,#(7 - 1)
   0AC5 5E                 2268 	ld	e, (hl)
   0AC6 23                 2269 	inc	hl
   0AC7 56                 2270 	ld	d, (hl)
   0AC8 1A                 2271 	ld	a,(de)
   0AC9 4F                 2272 	ld	c, a
   0ACA 13                 2273 	inc	de
   0ACB 1A                 2274 	ld	a,(de)
   0ACC 47                 2275 	ld	b, a
   0ACD 79                 2276 	ld	a, c
   0ACE C6 FC              2277 	add	a, #0xfc
   0AD0 4F                 2278 	ld	c, a
   0AD1 78                 2279 	ld	a, b
   0AD2 CE FF              2280 	adc	a, #0xff
   0AD4 47                 2281 	ld	b, a
   0AD5 F8 0F              2282 	ldhl	sp,	#15
   0AD7 7E                 2283 	ld	a, (hl)
   0AD8 91                 2284 	sub	a, c
   0AD9 23                 2285 	inc	hl
   0ADA 7E                 2286 	ld	a, (hl)
   0ADB 98                 2287 	sbc	a, b
   0ADC 3E 00              2288 	ld	a, #0x00
   0ADE 17                 2289 	rla
   0ADF F8 0E              2290 	ldhl	sp,	#14
   0AE1 A6                 2291 	and	a,(hl)
   0AE2 CAr5Dr0B           2292 	jp	Z, 00280$
                           2293 ;SpritePlayer.c:359: ispr->coll_x = 0;
   0AE5 D1                 2294 	pop	de
   0AE6 D5                 2295 	push	de
   0AE7 21 0D 00           2296 	ld	hl, #0x000d
   0AEA 19                 2297 	add	hl, de
   0AEB 4D                 2298 	ld	c, l
   0AEC 44                 2299 	ld	b, h
   0AED AF                 2300 	xor	a, a
   0AEE 02                 2301 	ld	(bc), a
                           2302 ;SpritePlayer.c:360: ispr->coll_y = 2;
   0AEF D1                 2303 	pop	de
   0AF0 D5                 2304 	push	de
   0AF1 21 0E 00           2305 	ld	hl, #0x000e
   0AF4 19                 2306 	add	hl, de
   0AF5 4D                 2307 	ld	c,l
   0AF6 7C                 2308 	ld	a,h
   0AF7 36 02              2309 	ld	(hl), #0x02
                           2310 ;SpritePlayer.c:361: ispr->coll_w = 8;	
   0AF9 D1                 2311 	pop	de
   0AFA D5                 2312 	push	de
   0AFB 21 0F 00           2313 	ld	hl, #0x000f
   0AFE 19                 2314 	add	hl, de
   0AFF 4D                 2315 	ld	c,l
   0B00 7C                 2316 	ld	a,h
   0B01 36 08              2317 	ld	(hl), #0x08
                           2318 ;SpritePlayer.c:362: platform_vx = datap->vx;
   0B03 F8 0C              2319 	ldhl	sp,#(13 - 1)
   0B05 4E                 2320 	ld	c, (hl)
   0B06 23                 2321 	inc	hl
   0B07 46                 2322 	ld	b, (hl)
   0B08 03                 2323 	inc	bc
   0B09 69                 2324 	ld	l, c
   0B0A 60                 2325 	ld	h, b
   0B0B 7E                 2326 	ld	a, (hl)
   0B0C E6 0F              2327 	and	a, #0x0f
   0B0E 21r04r00           2328 	ld	hl, #_platform_vx
   0B11 77                 2329 	ld	(hl), a
                           2330 ;SpritePlayer.c:363: if(archer_state != STATE_NORMAL & archer_state != STATE_NORMAL_PLATFORM){
   0B12 21r00r00           2331 	ld	hl, #_archer_state
   0B15 7E                 2332 	ld	a, (hl)
   0B16 D6 01              2333 	sub	a,#0x01
   0B18 3E 00              2334 	ld	a, #0x00
   0B1A 17                 2335 	rla
   0B1B EE 01              2336 	xor	a, #0x01
   0B1D 4F                 2337 	ld	c, a
   0B1E 7E                 2338 	ld	a, (hl)
   0B1F 3D                 2339 	dec	a
   0B20 3E 01              2340 	ld	a, #0x01
   0B22 28 01              2341 	jr	Z,00860$
   0B24 AF                 2342 	xor	a, a
   0B25                    2343 00860$:
   0B25 EE 01              2344 	xor	a, #0x01
   0B27 A1                 2345 	and	a, c
   0B28 CB 47              2346 	bit	0, a
   0B2A CAr5Dr0B           2347 	jp	Z, 00280$
                           2348 ;SpritePlayer.c:364: archer_state = STATE_NORMAL_PLATFORM;
   0B2D 21r00r00           2349 	ld	hl, #_archer_state
   0B30 36 01              2350 	ld	(hl), #0x01
                           2351 ;SpritePlayer.c:365: THIS->y = ispr->y - 12;
   0B32 21r01r00           2352 	ld	hl, #_THIS + 1
   0B35 2B                 2353 	dec	hl
   0B36 4E                 2354 	ld	c, (hl)
   0B37 23                 2355 	inc	hl
   0B38 46                 2356 	ld	b, (hl)
   0B39 21 0A 00           2357 	ld	hl, #0x000a
   0B3C 09                 2358 	add	hl, bc
   0B3D 7D                 2359 	ld	a, l
   0B3E 54                 2360 	ld	d, h
   0B3F F8 0F              2361 	ldhl	sp,	#15
   0B41 22                 2362 	ld	(hl+), a
   0B42 72                 2363 	ld	(hl), d
   0B43 F8 06              2364 	ldhl	sp,#(7 - 1)
   0B45 5E                 2365 	ld	e, (hl)
   0B46 23                 2366 	inc	hl
   0B47 56                 2367 	ld	d, (hl)
   0B48 1A                 2368 	ld	a,(de)
   0B49 4F                 2369 	ld	c, a
   0B4A 13                 2370 	inc	de
   0B4B 1A                 2371 	ld	a,(de)
   0B4C 47                 2372 	ld	b, a
   0B4D 79                 2373 	ld	a, c
   0B4E C6 F4              2374 	add	a, #0xf4
   0B50 4F                 2375 	ld	c, a
   0B51 78                 2376 	ld	a, b
   0B52 CE FF              2377 	adc	a, #0xff
   0B54 47                 2378 	ld	b, a
   0B55 F8 0F              2379 	ldhl	sp,	#15
   0B57 2A                 2380 	ld	a, (hl+)
   0B58 66                 2381 	ld	h, (hl)
   0B59 6F                 2382 	ld	l, a
   0B5A 71                 2383 	ld	(hl), c
   0B5B 23                 2384 	inc	hl
   0B5C 70                 2385 	ld	(hl), b
   0B5D                    2386 00280$:
                           2387 ;SpritePlayer.c:238: SPRITEMANAGER_ITERATE(scroll_tile, ispr) {
   0B5D F8 11              2388 	ldhl	sp,	#17
   0B5F 34                 2389 	inc	(hl)
   0B60 4E                 2390 	ld	c, (hl)
   0B61 06 00              2391 	ld	b, #0x00
   0B63 03                 2392 	inc	bc
   0B64 21r00r00           2393 	ld	hl, #_sprite_manager_updatables
   0B67 09                 2394 	add	hl, bc
   0B68 4D                 2395 	ld	c,l
   0B69 7C                 2396 	ld	a,h
   0B6A 4E                 2397 	ld	c, (hl)
   0B6B 06 00              2398 	ld	b, #0x00
   0B6D CB 21              2399 	sla	c
   0B6F CB 10              2400 	rl	b
   0B71 21r00r00           2401 	ld	hl, #_sprite_manager_sprites
   0B74 09                 2402 	add	hl, bc
   0B75 4D                 2403 	ld	c, l
   0B76 44                 2404 	ld	b, h
   0B77 59                 2405 	ld	e, c
   0B78 50                 2406 	ld	d, b
   0B79 1A                 2407 	ld	a,(de)
   0B7A F8 00              2408 	ldhl	sp,	#0
   0B7C 22                 2409 	ld	(hl+), a
   0B7D 13                 2410 	inc	de
   0B7E 1A                 2411 	ld	a, (de)
   0B7F 77                 2412 	ld	(hl), a
   0B80 C3r96r05           2413 	jp	00279$
   0B83                    2414 00281$:
                           2415 ;SpritePlayer.c:372: }
   0B83 E8 12              2416 	add	sp, #18
   0B85 C9                 2417 	ret
                           2418 ;SpritePlayer.c:374: void Die(){
                           2419 ;	---------------------------------
                           2420 ; Function Die
                           2421 ; ---------------------------------
   0B86                    2422 _Die::
                           2423 ;SpritePlayer.c:375: archer_state = STATE_DEAD;
   0B86 21r00r00           2424 	ld	hl, #_archer_state
   0B89 36 06              2425 	ld	(hl), #0x06
                           2426 ;SpritePlayer.c:376: }
   0B8B C9                 2427 	ret
                           2428 ;SpritePlayer.c:378: void Shoot() {
                           2429 ;	---------------------------------
                           2430 ; Function Shoot
                           2431 ; ---------------------------------
   0B8C                    2432 _Shoot::
   0B8C E8 FB              2433 	add	sp, #-5
                           2434 ;SpritePlayer.c:379: SetSpriteAnim(THIS, anim_shoot, 16u);
   0B8E 3E 10              2435 	ld	a, #0x10
   0B90 F5                 2436 	push	af
   0B91 33                 2437 	inc	sp
   0B92 21r6Fr00           2438 	ld	hl, #_anim_shoot
   0B95 E5                 2439 	push	hl
   0B96 21r00r00           2440 	ld	hl, #_THIS
   0B99 2A                 2441 	ld	a, (hl+)
   0B9A 66                 2442 	ld	h, (hl)
   0B9B 6F                 2443 	ld	l, a
   0B9C E5                 2444 	push	hl
   0B9D CDr00r00           2445 	call	_SetSpriteAnim
   0BA0 E8 05              2446 	add	sp, #5
                           2447 ;SpritePlayer.c:380: struct Sprite* arrow_sprite = SpriteManagerAdd(SpriteArrow, 0, 0);
   0BA2 21 00 00           2448 	ld	hl, #0x0000
   0BA5 E5                 2449 	push	hl
   0BA6 2E 00              2450 	ld	l, #0x00
   0BA8 E5                 2451 	push	hl
   0BA9 3E 01              2452 	ld	a, #0x01
   0BAB F5                 2453 	push	af
   0BAC 33                 2454 	inc	sp
   0BAD CDr00r00           2455 	call	_SpriteManagerAdd
   0BB0 E8 05              2456 	add	sp, #5
   0BB2 33                 2457 	inc	sp
   0BB3 33                 2458 	inc	sp
   0BB4 D5                 2459 	push	de
                           2460 ;SpritePlayer.c:383: arrow_sprite->flags = THIS->flags;
   0BB5 D1                 2461 	pop	de
   0BB6 D5                 2462 	push	de
   0BB7 21 0C 00           2463 	ld	hl, #0x000c
   0BBA 19                 2464 	add	hl, de
   0BBB 7D                 2465 	ld	a, l
   0BBC 54                 2466 	ld	d, h
   0BBD F8 03              2467 	ldhl	sp,	#3
   0BBF 22                 2468 	ld	(hl+), a
   0BC0 72                 2469 	ld	(hl), d
   0BC1 21r01r00           2470 	ld	hl, #_THIS + 1
   0BC4 2B                 2471 	dec	hl
   0BC5 4E                 2472 	ld	c, (hl)
   0BC6 23                 2473 	inc	hl
   0BC7 46                 2474 	ld	b, (hl)
   0BC8 21 0C 00           2475 	ld	hl, #0x000c
   0BCB 09                 2476 	add	hl, bc
   0BCC 4D                 2477 	ld	c,l
   0BCD 7C                 2478 	ld	a,h
   0BCE 4E                 2479 	ld	c, (hl)
   0BCF F8 03              2480 	ldhl	sp,	#3
   0BD1 2A                 2481 	ld	a, (hl+)
   0BD2 66                 2482 	ld	h, (hl)
   0BD3 6F                 2483 	ld	l, a
   0BD4 71                 2484 	ld	(hl), c
                           2485 ;SpritePlayer.c:384: arrow_sprite->x = THIS->x;
   0BD5 D1                 2486 	pop	de
   0BD6 D5                 2487 	push	de
   0BD7 21 08 00           2488 	ld	hl, #0x0008
   0BDA 19                 2489 	add	hl, de
   0BDB 7D                 2490 	ld	a, l
   0BDC 54                 2491 	ld	d, h
   0BDD F8 03              2492 	ldhl	sp,	#3
   0BDF 22                 2493 	ld	(hl+), a
   0BE0 72                 2494 	ld	(hl), d
   0BE1 21r00r00           2495 	ld	hl, #_THIS
   0BE4 46                 2496 	ld	b, (hl)
   0BE5 23                 2497 	inc	hl
   0BE6 4E                 2498 	ld	c, (hl)
   0BE7 78                 2499 	ld	a, b
   0BE8 C6 08              2500 	add	a, #0x08
   0BEA 47                 2501 	ld	b, a
   0BEB 30 01              2502 	jr	NC,00141$
   0BED 0C                 2503 	inc	c
   0BEE                    2504 00141$:
   0BEE 68                 2505 	ld	l, b
   0BEF 61                 2506 	ld	h, c
   0BF0 4E                 2507 	ld	c, (hl)
   0BF1 23                 2508 	inc	hl
   0BF2 46                 2509 	ld	b, (hl)
   0BF3 F8 03              2510 	ldhl	sp,	#3
   0BF5 2A                 2511 	ld	a, (hl+)
   0BF6 66                 2512 	ld	h, (hl)
   0BF7 6F                 2513 	ld	l, a
   0BF8 71                 2514 	ld	(hl), c
   0BF9 23                 2515 	inc	hl
   0BFA 70                 2516 	ld	(hl), b
                           2517 ;SpritePlayer.c:385: arrow_sprite->x += 4;
   0BFB 03                 2518 	inc	bc
   0BFC 03                 2519 	inc	bc
   0BFD 03                 2520 	inc	bc
   0BFE 03                 2521 	inc	bc
   0BFF F8 03              2522 	ldhl	sp,	#3
   0C01 2A                 2523 	ld	a, (hl+)
   0C02 66                 2524 	ld	h, (hl)
   0C03 6F                 2525 	ld	l, a
   0C04 71                 2526 	ld	(hl), c
   0C05 23                 2527 	inc	hl
   0C06 70                 2528 	ld	(hl), b
                           2529 ;SpritePlayer.c:386: arrow_sprite->y = THIS->y;
   0C07 D1                 2530 	pop	de
   0C08 D5                 2531 	push	de
   0C09 21 0A 00           2532 	ld	hl, #0x000a
   0C0C 19                 2533 	add	hl, de
   0C0D 7D                 2534 	ld	a, l
   0C0E 54                 2535 	ld	d, h
   0C0F F8 02              2536 	ldhl	sp,	#2
   0C11 22                 2537 	ld	(hl+), a
   0C12 72                 2538 	ld	(hl), d
   0C13 21r00r00           2539 	ld	hl, #_THIS
   0C16 46                 2540 	ld	b, (hl)
   0C17 23                 2541 	inc	hl
   0C18 4E                 2542 	ld	c, (hl)
   0C19 78                 2543 	ld	a, b
   0C1A C6 0A              2544 	add	a, #0x0a
   0C1C 47                 2545 	ld	b, a
   0C1D 30 01              2546 	jr	NC,00142$
   0C1F 0C                 2547 	inc	c
   0C20                    2548 00142$:
   0C20 68                 2549 	ld	l, b
   0C21 61                 2550 	ld	h, c
   0C22 4E                 2551 	ld	c, (hl)
   0C23 23                 2552 	inc	hl
   0C24 46                 2553 	ld	b, (hl)
   0C25 F8 02              2554 	ldhl	sp,	#2
   0C27 2A                 2555 	ld	a, (hl+)
   0C28 66                 2556 	ld	h, (hl)
   0C29 6F                 2557 	ld	l, a
   0C2A 71                 2558 	ld	(hl), c
   0C2B 23                 2559 	inc	hl
   0C2C 70                 2560 	ld	(hl), b
                           2561 ;SpritePlayer.c:387: struct ArrowInfo* arrow_data = (struct ArrowInfo*)arrow_sprite->custom_data;
   0C2D D1                 2562 	pop	de
   0C2E D5                 2563 	push	de
   0C2F 21 19 00           2564 	ld	hl, #0x0019
   0C32 19                 2565 	add	hl, de
   0C33 4D                 2566 	ld	c, l
   0C34 7C                 2567 	ld	a, h
   0C35 47                 2568 	ld	b, a
                           2569 ;SpritePlayer.c:388: if (archer_data->amulet){arrow_data->type = archer_data->amulet;}
   0C36 21r0Er00           2570 	ld	hl, #_archer_data + 1
   0C39 2B                 2571 	dec	hl
   0C3A 5E                 2572 	ld	e, (hl)
   0C3B 23                 2573 	inc	hl
   0C3C 56                 2574 	ld	d, (hl)
   0C3D 1A                 2575 	ld	a, (de)
   0C3E B7                 2576 	or	a, a
   0C3F 28 0C              2577 	jr	Z,00102$
   0C41 59                 2578 	ld	e, c
   0C42 50                 2579 	ld	d, b
   0C43 E6 0F              2580 	and	a, #0x0f
   0C45 6F                 2581 	ld	l, a
   0C46 1A                 2582 	ld	a, (de)
   0C47 E6 F0              2583 	and	a, #0xf0
   0C49 B5                 2584 	or	a, l
   0C4A 12                 2585 	ld	(de), a
   0C4B 18 08              2586 	jr	00103$
   0C4D                    2587 00102$:
                           2588 ;SpritePlayer.c:389: else{arrow_data->type = 1;}
   0C4D 59                 2589 	ld	e, c
   0C4E 50                 2590 	ld	d, b
   0C4F 1A                 2591 	ld	a, (de)
   0C50 E6 F0              2592 	and	a, #0xf0
   0C52 F6 01              2593 	or	a, #0x01
   0C54 12                 2594 	ld	(de),a
   0C55                    2595 00103$:
                           2596 ;SpritePlayer.c:390: if (KEY_PRESSED(J_DOWN)){
   0C55 E5                 2597 	push	hl
   0C56 21r00r00           2598 	ld	hl, #_keys
   0C59 7E                 2599 	ld	a, (hl)
   0C5A F8 06              2600 	ldhl	sp,	#6
   0C5C 77                 2601 	ld	(hl), a
   0C5D E1                 2602 	pop	hl
                           2603 ;SpritePlayer.c:391: arrow_data->arrowdir = 4; // verticale in giu
   0C5E 03                 2604 	inc	bc
   0C5F 03                 2605 	inc	bc
   0C60 03                 2606 	inc	bc
                           2607 ;SpritePlayer.c:390: if (KEY_PRESSED(J_DOWN)){
   0C61 F8 04              2608 	ldhl	sp,	#4
   0C63 CB 5E              2609 	bit	3, (hl)
   0C65 28 1E              2610 	jr	Z,00112$
                           2611 ;SpritePlayer.c:391: arrow_data->arrowdir = 4; // verticale in giu
   0C67 3E 04              2612 	ld	a, #0x04
   0C69 02                 2613 	ld	(bc), a
                           2614 ;SpritePlayer.c:392: arrow_sprite->y += 8;
   0C6A F8 02              2615 	ldhl	sp,#(3 - 1)
   0C6C 5E                 2616 	ld	e, (hl)
   0C6D 23                 2617 	inc	hl
   0C6E 56                 2618 	ld	d, (hl)
   0C6F 1A                 2619 	ld	a,(de)
   0C70 47                 2620 	ld	b, a
   0C71 13                 2621 	inc	de
   0C72 1A                 2622 	ld	a,(de)
   0C73 4F                 2623 	ld	c, a
   0C74 78                 2624 	ld	a, b
   0C75 C6 08              2625 	add	a, #0x08
   0C77 47                 2626 	ld	b, a
   0C78 30 01              2627 	jr	NC,00144$
   0C7A 0C                 2628 	inc	c
   0C7B                    2629 00144$:
   0C7B 2B                 2630 	dec	hl
   0C7C 2A                 2631 	ld	a, (hl+)
   0C7D 66                 2632 	ld	h, (hl)
   0C7E 6F                 2633 	ld	l, a
   0C7F 70                 2634 	ld	(hl), b
   0C80 23                 2635 	inc	hl
   0C81 71                 2636 	ld	(hl), c
   0C82 C3rBFr0C           2637 	jp	00113$
   0C85                    2638 00112$:
                           2639 ;SpritePlayer.c:394: if (KEY_PRESSED(J_UP)){ //diagonale
   0C85 F8 04              2640 	ldhl	sp,	#4
   0C87 CB 56              2641 	bit	2, (hl)
   0C89 28 05              2642 	jr	Z,00107$
                           2643 ;SpritePlayer.c:395: arrow_data->arrowdir = 2;
   0C8B 3E 02              2644 	ld	a, #0x02
   0C8D 02                 2645 	ld	(bc), a
   0C8E 18 0B              2646 	jr	00108$
   0C90                    2647 00107$:
                           2648 ;SpritePlayer.c:397: if(aimc < 16){ //orizzontale
   0C90 21r0Br00           2649 	ld	hl, #_aimc
   0C93 7E                 2650 	ld	a, (hl)
   0C94 D6 10              2651 	sub	a, #0x10
   0C96 30 03              2652 	jr	NC,00108$
                           2653 ;SpritePlayer.c:398: arrow_data->arrowdir = 1;
   0C98 3E 01              2654 	ld	a, #0x01
   0C9A 02                 2655 	ld	(bc), a
   0C9B                    2656 00108$:
                           2657 ;SpritePlayer.c:401: if (aimc == 16){ // verticale in su
   0C9B 21r0Br00           2658 	ld	hl, #_aimc
   0C9E 7E                 2659 	ld	a, (hl)
   0C9F D6 10              2660 	sub	a, #0x10
   0CA1 20 1C              2661 	jr	NZ,00113$
                           2662 ;SpritePlayer.c:402: arrow_data->arrowdir = 3;
   0CA3 3E 03              2663 	ld	a, #0x03
   0CA5 02                 2664 	ld	(bc), a
                           2665 ;SpritePlayer.c:403: arrow_sprite->y -= 4;
   0CA6 F8 02              2666 	ldhl	sp,#(3 - 1)
   0CA8 5E                 2667 	ld	e, (hl)
   0CA9 23                 2668 	inc	hl
   0CAA 56                 2669 	ld	d, (hl)
   0CAB 1A                 2670 	ld	a,(de)
   0CAC 4F                 2671 	ld	c, a
   0CAD 13                 2672 	inc	de
   0CAE 1A                 2673 	ld	a,(de)
   0CAF 47                 2674 	ld	b, a
   0CB0 79                 2675 	ld	a, c
   0CB1 C6 FC              2676 	add	a, #0xfc
   0CB3 4F                 2677 	ld	c, a
   0CB4 78                 2678 	ld	a, b
   0CB5 CE FF              2679 	adc	a, #0xff
   0CB7 47                 2680 	ld	b, a
   0CB8 2B                 2681 	dec	hl
   0CB9 2A                 2682 	ld	a, (hl+)
   0CBA 66                 2683 	ld	h, (hl)
   0CBB 6F                 2684 	ld	l, a
   0CBC 71                 2685 	ld	(hl), c
   0CBD 23                 2686 	inc	hl
   0CBE 70                 2687 	ld	(hl), b
   0CBF                    2688 00113$:
                           2689 ;SpritePlayer.c:406: shoot_cooldown = 4;//8
   0CBF 21r02r00           2690 	ld	hl, #_shoot_cooldown
   0CC2 36 04              2691 	ld	(hl), #0x04
                           2692 ;SpritePlayer.c:407: aimc = 0;
   0CC4 21r0Br00           2693 	ld	hl, #_aimc
   0CC7 36 00              2694 	ld	(hl), #0x00
                           2695 ;SpritePlayer.c:408: }
   0CC9 E8 05              2696 	add	sp, #5
   0CCB C9                 2697 	ret
                           2698 ;SpritePlayer.c:410: void Jump() {
                           2699 ;	---------------------------------
                           2700 ; Function Jump
                           2701 ; ---------------------------------
   0CCC                    2702 _Jump::
                           2703 ;SpritePlayer.c:411: if(archer_state != STATE_JUMPING) {
   0CCC 21r00r00           2704 	ld	hl, #_archer_state
   0CCF 7E                 2705 	ld	a, (hl)
   0CD0 D6 02              2706 	sub	a, #0x02
   0CD2 C8                 2707 	ret	Z
                           2708 ;SpritePlayer.c:412: NR50_REG = 0x22; //Max volume		
   0CD3 3E 22              2709 	ld	a, #0x22
   0CD5 E0r00              2710 	ldh	(_NR50_REG+0),a
                           2711 ;SpritePlayer.c:414: archer_state = STATE_JUMPING;
   0CD7 21r00r00           2712 	ld	hl, #_archer_state
   0CDA 36 02              2713 	ld	(hl), #0x02
                           2714 ;SpritePlayer.c:415: archer_accel_y = -8;
   0CDC 21r08r00           2715 	ld	hl, #_archer_accel_y
   0CDF 36 F8              2716 	ld	(hl), #0xf8
   0CE1 23                 2717 	inc	hl
   0CE2 36 FF              2718 	ld	(hl), #0xff
                           2719 ;SpritePlayer.c:416: princess_parent = 0;
   0CE4 21r06r00           2720 	ld	hl, #_princess_parent
   0CE7 36 00              2721 	ld	(hl), #0x00
   0CE9 23                 2722 	inc	hl
   0CEA 36 00              2723 	ld	(hl), #0x00
                           2724 ;SpritePlayer.c:417: SetSpriteAnim(THIS, anim_jump_up, 12u);
   0CEC 3E 0C              2725 	ld	a, #0x0c
   0CEE F5                 2726 	push	af
   0CEF 33                 2727 	inc	sp
   0CF0 21r5Fr00           2728 	ld	hl, #_anim_jump_up
   0CF3 E5                 2729 	push	hl
   0CF4 21r00r00           2730 	ld	hl, #_THIS
   0CF7 2A                 2731 	ld	a, (hl+)
   0CF8 66                 2732 	ld	h, (hl)
   0CF9 6F                 2733 	ld	l, a
   0CFA E5                 2734 	push	hl
   0CFB CDr00r00           2735 	call	_SetSpriteAnim
   0CFE E8 05              2736 	add	sp, #5
                           2737 ;SpritePlayer.c:419: }
   0D00 C9                 2738 	ret
                           2739 ;SpritePlayer.c:421: void MoveArcher() {
                           2740 ;	---------------------------------
                           2741 ; Function MoveArcher
                           2742 ; ---------------------------------
   0D01                    2743 _MoveArcher::
   0D01 E8 FC              2744 	add	sp, #-4
                           2745 ;SpritePlayer.c:423: if(KEY_PRESSED(J_LEFT)) {
   0D03 E5                 2746 	push	hl
   0D04 21r00r00           2747 	ld	hl, #_keys
   0D07 7E                 2748 	ld	a, (hl)
   0D08 F8 02              2749 	ldhl	sp,	#2
   0D0A 77                 2750 	ld	(hl), a
   0D0B E1                 2751 	pop	hl
                           2752 ;SpritePlayer.c:427: if (SPRITE_GET_VMIRROR(THIS)){
   0D0C 21r01r00           2753 	ld	hl, #_THIS + 1
   0D0F 2B                 2754 	dec	hl
   0D10 4E                 2755 	ld	c, (hl)
   0D11 23                 2756 	inc	hl
   0D12 46                 2757 	ld	b, (hl)
                           2758 ;SpritePlayer.c:428: tile_collision = TranslateSprite(THIS, -1 << delta_time, 0);
   0D13 E5                 2759 	push	hl
   0D14 21r00r00           2760 	ld	hl, #_delta_time
   0D17 7E                 2761 	ld	a, (hl)
   0D18 F8 03              2762 	ldhl	sp,	#3
   0D1A 77                 2763 	ld	(hl), a
   0D1B E1                 2764 	pop	hl
                           2765 ;SpritePlayer.c:427: if (SPRITE_GET_VMIRROR(THIS)){
   0D1C 21 0C 00           2766 	ld	hl, #0x000c
   0D1F 09                 2767 	add	hl, bc
   0D20 7D                 2768 	ld	a, l
   0D21 54                 2769 	ld	d, h
   0D22 F8 02              2770 	ldhl	sp,	#2
   0D24 22                 2771 	ld	(hl+), a
   0D25 72                 2772 	ld	(hl), d
                           2773 ;SpritePlayer.c:423: if(KEY_PRESSED(J_LEFT)) {
   0D26 F8 00              2774 	ldhl	sp,	#0
   0D28 CB 4E              2775 	bit	1, (hl)
   0D2A CAr76r0D           2776 	jp	Z,00111$
                           2777 ;SpritePlayer.c:424: if(KEY_PRESSED(J_DOWN)){
   0D2D F8 00              2778 	ldhl	sp,	#0
   0D2F CB 5E              2779 	bit	3, (hl)
   0D31 C2r62r0D           2780 	jp	NZ,00105$
                           2781 ;SpritePlayer.c:427: if (SPRITE_GET_VMIRROR(THIS)){
   0D34 F8 02              2782 	ldhl	sp,#(3 - 1)
   0D36 5E                 2783 	ld	e, (hl)
   0D37 23                 2784 	inc	hl
   0D38 56                 2785 	ld	d, (hl)
   0D39 1A                 2786 	ld	a,(de)
   0D3A CB 6F              2787 	bit	5, a
   0D3C 28 24              2788 	jr	Z,00105$
                           2789 ;SpritePlayer.c:428: tile_collision = TranslateSprite(THIS, -1 << delta_time, 0);
   0D3E F8 01              2790 	ldhl	sp,	#1
   0D40 7E                 2791 	ld	a, (hl)
   0D41 F5                 2792 	push	af
   0D42 06 FF              2793 	ld	b, #0xff
   0D44 F1                 2794 	pop	af
   0D45 3C                 2795 	inc	a
   0D46 18 02              2796 	jr	00145$
   0D48                    2797 00144$:
   0D48 CB 20              2798 	sla	b
   0D4A                    2799 00145$:
   0D4A 3D                 2800 	dec	a
   0D4B 20 FB              2801 	jr	NZ,00144$
   0D4D AF                 2802 	xor	a, a
   0D4E F5                 2803 	push	af
   0D4F 33                 2804 	inc	sp
   0D50 C5                 2805 	push	bc
   0D51 33                 2806 	inc	sp
   0D52 21r00r00           2807 	ld	hl, #_THIS
   0D55 2A                 2808 	ld	a, (hl+)
   0D56 66                 2809 	ld	h, (hl)
   0D57 6F                 2810 	ld	l, a
   0D58 E5                 2811 	push	hl
   0D59 CDr00r00           2812 	call	_TranslateSprite
   0D5C E8 04              2813 	add	sp, #4
   0D5E 21r0Ar00           2814 	ld	hl, #_tile_collision
   0D61 73                 2815 	ld	(hl), e
   0D62                    2816 00105$:
                           2817 ;SpritePlayer.c:427: if (SPRITE_GET_VMIRROR(THIS)){
   0D62 21r01r00           2818 	ld	hl, #_THIS + 1
   0D65 2B                 2819 	dec	hl
   0D66 4E                 2820 	ld	c, (hl)
   0D67 23                 2821 	inc	hl
   0D68 46                 2822 	ld	b, (hl)
   0D69 21 0C 00           2823 	ld	hl, #0x000c
   0D6C 09                 2824 	add	hl, bc
   0D6D 4D                 2825 	ld	c, l
   0D6E 44                 2826 	ld	b, h
                           2827 ;SpritePlayer.c:431: SPRITE_SET_VMIRROR(THIS);
   0D6F 0A                 2828 	ld	a, (bc)
   0D70 CB EF              2829 	set	5, a
   0D72 02                 2830 	ld	(bc), a
   0D73 C3rE1r0D           2831 	jp	00112$
   0D76                    2832 00111$:
                           2833 ;SpritePlayer.c:433: else if(KEY_PRESSED(J_RIGHT)) {
   0D76 F8 00              2834 	ldhl	sp,	#0
   0D78 CB 46              2835 	bit	0, (hl)
   0D7A CArE1r0D           2836 	jp	Z,00112$
                           2837 ;SpritePlayer.c:434: if(!SPRITE_GET_VMIRROR(THIS) & !KEY_PRESSED(J_DOWN)){
   0D7D F8 02              2838 	ldhl	sp,#(3 - 1)
   0D7F 5E                 2839 	ld	e, (hl)
   0D80 23                 2840 	inc	hl
   0D81 56                 2841 	ld	d, (hl)
   0D82 1A                 2842 	ld	a,(de)
   0D83 4F                 2843 	ld	c, a
   0D84 06 00              2844 	ld	b, #0x00
   0D86 79                 2845 	ld	a, c
   0D87 E6 20              2846 	and	a, #0x20
   0D89 4F                 2847 	ld	c, a
   0D8A 06 00              2848 	ld	b, #0x00
   0D8C 78                 2849 	ld	a, b
   0D8D B1                 2850 	or	a, c
   0D8E D6 01              2851 	sub	a,#0x01
   0D90 3E 00              2852 	ld	a, #0x00
   0D92 17                 2853 	rla
   0D93 4F                 2854 	ld	c, a
   0D94 21r00r00           2855 	ld	hl, #_keys
   0D97 46                 2856 	ld	b, (hl)
   0D98 1E 00              2857 	ld	e, #0x00
   0D9A 78                 2858 	ld	a, b
   0D9B E6 08              2859 	and	a, #0x08
   0D9D 47                 2860 	ld	b, a
   0D9E 1E 00              2861 	ld	e, #0x00
   0DA0 7B                 2862 	ld	a, e
   0DA1 B0                 2863 	or	a, b
   0DA2 D6 01              2864 	sub	a,#0x01
   0DA4 3E 00              2865 	ld	a, #0x00
   0DA6 17                 2866 	rla
   0DA7 A1                 2867 	and	a, c
   0DA8 CB 47              2868 	bit	0, a
   0DAA 28 24              2869 	jr	Z,00107$
                           2870 ;SpritePlayer.c:435: tile_collision = TranslateSprite(THIS, 1 << delta_time, 0);
   0DAC F8 01              2871 	ldhl	sp,	#1
   0DAE 7E                 2872 	ld	a, (hl)
   0DAF F5                 2873 	push	af
   0DB0 06 01              2874 	ld	b, #0x01
   0DB2 F1                 2875 	pop	af
   0DB3 3C                 2876 	inc	a
   0DB4 18 02              2877 	jr	00148$
   0DB6                    2878 00147$:
   0DB6 CB 20              2879 	sla	b
   0DB8                    2880 00148$:
   0DB8 3D                 2881 	dec	a
   0DB9 20 FB              2882 	jr	NZ,00147$
   0DBB AF                 2883 	xor	a, a
   0DBC F5                 2884 	push	af
   0DBD 33                 2885 	inc	sp
   0DBE C5                 2886 	push	bc
   0DBF 33                 2887 	inc	sp
   0DC0 21r00r00           2888 	ld	hl, #_THIS
   0DC3 2A                 2889 	ld	a, (hl+)
   0DC4 66                 2890 	ld	h, (hl)
   0DC5 6F                 2891 	ld	l, a
   0DC6 E5                 2892 	push	hl
   0DC7 CDr00r00           2893 	call	_TranslateSprite
   0DCA E8 04              2894 	add	sp, #4
   0DCC 21r0Ar00           2895 	ld	hl, #_tile_collision
   0DCF 73                 2896 	ld	(hl), e
   0DD0                    2897 00107$:
                           2898 ;SpritePlayer.c:427: if (SPRITE_GET_VMIRROR(THIS)){
   0DD0 21r01r00           2899 	ld	hl, #_THIS + 1
   0DD3 2B                 2900 	dec	hl
   0DD4 4E                 2901 	ld	c, (hl)
   0DD5 23                 2902 	inc	hl
   0DD6 46                 2903 	ld	b, (hl)
   0DD7 21 0C 00           2904 	ld	hl, #0x000c
   0DDA 09                 2905 	add	hl, bc
   0DDB 4D                 2906 	ld	c, l
   0DDC 44                 2907 	ld	b, h
                           2908 ;SpritePlayer.c:437: SPRITE_UNSET_VMIRROR(THIS);
   0DDD 0A                 2909 	ld	a, (bc)
   0DDE CB AF              2910 	res	5, a
   0DE0 02                 2911 	ld	(bc), a
   0DE1                    2912 00112$:
                           2913 ;SpritePlayer.c:439: tile_collision = TranslateSprite(THIS, platform_vx << delta_time, 0);
   0DE1 21r00r00           2914 	ld	hl, #_delta_time
   0DE4 4E                 2915 	ld	c, (hl)
   0DE5 21r04r00           2916 	ld	hl, #_platform_vx
   0DE8 46                 2917 	ld	b, (hl)
   0DE9 0C                 2918 	inc	c
   0DEA 18 02              2919 	jr	00150$
   0DEC                    2920 00149$:
   0DEC CB 20              2921 	sla	b
   0DEE                    2922 00150$:
   0DEE 0D                 2923 	dec	c
   0DEF 20 FB              2924 	jr	NZ,00149$
   0DF1 AF                 2925 	xor	a, a
   0DF2 F5                 2926 	push	af
   0DF3 33                 2927 	inc	sp
   0DF4 C5                 2928 	push	bc
   0DF5 33                 2929 	inc	sp
   0DF6 21r00r00           2930 	ld	hl, #_THIS
   0DF9 2A                 2931 	ld	a, (hl+)
   0DFA 66                 2932 	ld	h, (hl)
   0DFB 6F                 2933 	ld	l, a
   0DFC E5                 2934 	push	hl
   0DFD CDr00r00           2935 	call	_TranslateSprite
   0E00 E8 04              2936 	add	sp, #4
   0E02 21r0Ar00           2937 	ld	hl, #_tile_collision
   0E05 73                 2938 	ld	(hl), e
                           2939 ;SpritePlayer.c:440: }
   0E06 E8 04              2940 	add	sp, #4
   0E08 C9                 2941 	ret
                           2942 ;SpritePlayer.c:442: void CheckCollisionTile() {
                           2943 ;	---------------------------------
                           2944 ; Function CheckCollisionTile
                           2945 ; ---------------------------------
   0E09                    2946 _CheckCollisionTile::
   0E09 E8 FE              2947 	add	sp, #-2
                           2948 ;SpritePlayer.c:443: if(tile_collision){
   0E0B 21r0Ar00           2949 	ld	hl, #_tile_collision
   0E0E 7E                 2950 	ld	a, (hl)
   0E0F B7                 2951 	or	a, a
   0E10 28 05              2952 	jr	Z,00102$
                           2953 ;SpritePlayer.c:444: platform_vx = 0;
   0E12 21r04r00           2954 	ld	hl, #_platform_vx
   0E15 36 00              2955 	ld	(hl), #0x00
   0E17                    2956 00102$:
                           2957 ;SpritePlayer.c:449: archer_data->hp -=  5;
   0E17 21r0Er00           2958 	ld	hl, #_archer_data + 1
   0E1A 2B                 2959 	dec	hl
   0E1B 4E                 2960 	ld	c, (hl)
   0E1C 23                 2961 	inc	hl
   0E1D 46                 2962 	ld	b, (hl)
   0E1E 21 02 00           2963 	ld	hl, #0x0002
   0E21 09                 2964 	add	hl, bc
   0E22 33                 2965 	inc	sp
   0E23 33                 2966 	inc	sp
   0E24 E5                 2967 	push	hl
                           2968 ;SpritePlayer.c:446: switch(tile_collision) {
   0E25 21r0Ar00           2969 	ld	hl, #_tile_collision
   0E28 7E                 2970 	ld	a, (hl)
   0E29 D6 02              2971 	sub	a, #0x02
   0E2B CAr74r0E           2972 	jp	Z,00103$
                           2973 ;SpritePlayer.c:458: if(archer_data->tool){
   0E2E 03                 2974 	inc	bc
   0E2F 03                 2975 	inc	bc
   0E30 03                 2976 	inc	bc
   0E31 03                 2977 	inc	bc
                           2978 ;SpritePlayer.c:446: switch(tile_collision) {
   0E32 21r0Ar00           2979 	ld	hl, #_tile_collision
   0E35 7E                 2980 	ld	a, (hl)
   0E36 D6 07              2981 	sub	a, #0x07
   0E38 CArB8r0E           2982 	jp	Z,00108$
   0E3B 21r0Ar00           2983 	ld	hl, #_tile_collision
   0E3E 7E                 2984 	ld	a, (hl)
   0E3F D6 08              2985 	sub	a, #0x08
   0E41 CArC5r0E           2986 	jp	Z,00111$
   0E44 21r0Ar00           2987 	ld	hl, #_tile_collision
   0E47 7E                 2988 	ld	a, (hl)
   0E48 D6 13              2989 	sub	a, #0x13
   0E4A CArD2r0E           2990 	jp	Z,00114$
   0E4D 21r0Ar00           2991 	ld	hl, #_tile_collision
   0E50 7E                 2992 	ld	a, (hl)
   0E51 D6 28              2993 	sub	a, #0x28
   0E53 CArD9r0E           2994 	jp	Z,00115$
   0E56 21r0Ar00           2995 	ld	hl, #_tile_collision
   0E59 7E                 2996 	ld	a, (hl)
   0E5A D6 29              2997 	sub	a, #0x29
   0E5C CArE2r0E           2998 	jp	Z,00116$
   0E5F 21r0Ar00           2999 	ld	hl, #_tile_collision
   0E62 7E                 3000 	ld	a, (hl)
   0E63 D6 2A              3001 	sub	a, #0x2a
   0E65 CArE9r0E           3002 	jp	Z,00117$
   0E68 21r0Ar00           3003 	ld	hl, #_tile_collision
   0E6B 7E                 3004 	ld	a, (hl)
   0E6C D6 2E              3005 	sub	a, #0x2e
   0E6E CArF0r0E           3006 	jp	Z,00118$
   0E71 C3rF5r0E           3007 	jp	00120$
                           3008 ;SpritePlayer.c:447: case 2u:
   0E74                    3009 00103$:
                           3010 ;SpritePlayer.c:448: if (archer_state != STATE_HIT){
   0E74 21r00r00           3011 	ld	hl, #_archer_state
   0E77 7E                 3012 	ld	a, (hl)
   0E78 D6 04              3013 	sub	a, #0x04
   0E7A CArF5r0E           3014 	jp	Z,00120$
                           3015 ;SpritePlayer.c:449: archer_data->hp -=  5;
   0E7D D1                 3016 	pop	de
   0E7E D5                 3017 	push	de
   0E7F 1A                 3018 	ld	a,(de)
   0E80 C6 FB              3019 	add	a, #0xfb
   0E82 4F                 3020 	ld	c, a
   0E83 E1                 3021 	pop	hl
   0E84 E5                 3022 	push	hl
   0E85 71                 3023 	ld	(hl), c
   0E86 21r0Er00           3024 	ld	hl, #_archer_data + 1
   0E89 2B                 3025 	dec	hl
   0E8A 4E                 3026 	ld	c, (hl)
   0E8B 23                 3027 	inc	hl
   0E8C 46                 3028 	ld	b, (hl)
   0E8D 03                 3029 	inc	bc
   0E8E 03                 3030 	inc	bc
                           3031 ;SpritePlayer.c:450: if (archer_data->hp <= 0){
   0E8F 0A                 3032 	ld	a, (bc)
   0E90 F8 01              3033 	ldhl	sp,	#1
   0E92 77                 3034 	ld	(hl),a
   0E93 5F                 3035 	ld	e, a
   0E94 3E 00              3036 	ld	a, #0x00
   0E96 57                 3037 	ld	d, a
   0E97 AF                 3038 	xor	a, a
   0E98 96                 3039 	sub	a, (hl)
   0E99 CB 7B              3040 	bit	7, e
   0E9B 28 07              3041 	jr	Z,00196$
   0E9D CB 7A              3042 	bit	7, d
   0E9F 20 08              3043 	jr	NZ,00197$
   0EA1 BF                 3044 	cp	a, a
   0EA2 18 05              3045 	jr	00197$
   0EA4                    3046 00196$:
   0EA4 CB 7A              3047 	bit	7, d
   0EA6 28 01              3048 	jr	Z,00197$
   0EA8 37                 3049 	scf
   0EA9                    3050 00197$:
   0EA9 38 07              3051 	jr	C,00105$
                           3052 ;SpritePlayer.c:451: archer_data->hp = 0;
   0EAB AF                 3053 	xor	a, a
   0EAC 02                 3054 	ld	(bc), a
                           3055 ;SpritePlayer.c:452: archer_state = STATE_DEAD;
   0EAD 21r00r00           3056 	ld	hl, #_archer_state
   0EB0 36 06              3057 	ld	(hl), #0x06
   0EB2                    3058 00105$:
                           3059 ;SpritePlayer.c:454: Hit();
   0EB2 CDrF8r0E           3060 	call	_Hit
                           3061 ;SpritePlayer.c:456: break;
   0EB5 C3rF5r0E           3062 	jp	00120$
                           3063 ;SpritePlayer.c:457: case 7u: //fine level - goto boss!
   0EB8                    3064 00108$:
                           3065 ;SpritePlayer.c:458: if(archer_data->tool){
   0EB8 0A                 3066 	ld	a, (bc)
   0EB9 B7                 3067 	or	a, a
   0EBA 28 39              3068 	jr	Z,00120$
                           3069 ;SpritePlayer.c:459: archer_data->tool = 0; //tool consumato
   0EBC AF                 3070 	xor	a, a
   0EBD 02                 3071 	ld	(bc), a
                           3072 ;SpritePlayer.c:460: load_next_b = 1;
   0EBE 21r00r00           3073 	ld	hl, #_load_next_b
   0EC1 36 01              3074 	ld	(hl), #0x01
                           3075 ;SpritePlayer.c:462: break;
   0EC3 18 30              3076 	jr	00120$
                           3077 ;SpritePlayer.c:463: case 8u: //fine boss!
   0EC5                    3078 00111$:
                           3079 ;SpritePlayer.c:464: if(archer_data->tool){
   0EC5 0A                 3080 	ld	a, (bc)
   0EC6 B7                 3081 	or	a, a
   0EC7 28 2C              3082 	jr	Z,00120$
                           3083 ;SpritePlayer.c:465: archer_data->tool = 0; //tool consumato
   0EC9 AF                 3084 	xor	a, a
   0ECA 02                 3085 	ld	(bc), a
                           3086 ;SpritePlayer.c:466: load_next_b = 2;
   0ECB 21r00r00           3087 	ld	hl, #_load_next_b
   0ECE 36 02              3088 	ld	(hl), #0x02
                           3089 ;SpritePlayer.c:468: break;
   0ED0 18 23              3090 	jr	00120$
                           3091 ;SpritePlayer.c:469: case 19u: //exit secret room
   0ED2                    3092 00114$:
                           3093 ;SpritePlayer.c:470: load_next_s = -1;
   0ED2 21r00r00           3094 	ld	hl, #_load_next_s
   0ED5 36 FF              3095 	ld	(hl), #0xff
                           3096 ;SpritePlayer.c:471: break;
   0ED7 18 1C              3097 	jr	00120$
                           3098 ;SpritePlayer.c:472: case 40u: //instant death
   0ED9                    3099 00115$:
                           3100 ;SpritePlayer.c:473: archer_data->hp = 0;
   0ED9 E1                 3101 	pop	hl
   0EDA E5                 3102 	push	hl
   0EDB 36 00              3103 	ld	(hl), #0x00
                           3104 ;SpritePlayer.c:474: Die();
   0EDD CDr86r0B           3105 	call	_Die
                           3106 ;SpritePlayer.c:475: break;
   0EE0 18 13              3107 	jr	00120$
                           3108 ;SpritePlayer.c:476: case 41u: //next map
   0EE2                    3109 00116$:
                           3110 ;SpritePlayer.c:477: load_next = 1;
   0EE2 21r00r00           3111 	ld	hl, #_load_next
   0EE5 36 01              3112 	ld	(hl), #0x01
                           3113 ;SpritePlayer.c:478: break;
   0EE7 18 0C              3114 	jr	00120$
                           3115 ;SpritePlayer.c:479: case 42u: //previous map
   0EE9                    3116 00117$:
                           3117 ;SpritePlayer.c:480: load_next = -1;
   0EE9 21r00r00           3118 	ld	hl, #_load_next
   0EEC 36 FF              3119 	ld	(hl), #0xff
                           3120 ;SpritePlayer.c:481: break;
   0EEE 18 05              3121 	jr	00120$
                           3122 ;SpritePlayer.c:482: case 46u: //secret room
   0EF0                    3123 00118$:
                           3124 ;SpritePlayer.c:483: load_next_s = 1;
   0EF0 21r00r00           3125 	ld	hl, #_load_next_s
   0EF3 36 01              3126 	ld	(hl), #0x01
                           3127 ;SpritePlayer.c:489: }
   0EF5                    3128 00120$:
                           3129 ;SpritePlayer.c:490: }
   0EF5 E8 02              3130 	add	sp, #2
   0EF7 C9                 3131 	ret
                           3132 ;SpritePlayer.c:492: void Hit() {
                           3133 ;	---------------------------------
                           3134 ; Function Hit
                           3135 ; ---------------------------------
   0EF8                    3136 _Hit::
   0EF8 E8 FE              3137 	add	sp, #-2
                           3138 ;SpritePlayer.c:493: if (archer_state != STATE_DEAD){
   0EFA 21r00r00           3139 	ld	hl, #_archer_state
   0EFD 7E                 3140 	ld	a, (hl)
   0EFE D6 06              3141 	sub	a, #0x06
   0F00 CAr63r0F           3142 	jp	Z,00103$
                           3143 ;SpritePlayer.c:494: archer_state = STATE_HIT;	
   0F03 21r00r00           3144 	ld	hl, #_archer_state
   0F06 36 04              3145 	ld	(hl), #0x04
                           3146 ;SpritePlayer.c:495: platform_vx = 1;
   0F08 21r04r00           3147 	ld	hl, #_platform_vx
   0F0B 36 01              3148 	ld	(hl), #0x01
                           3149 ;SpritePlayer.c:496: THIS->y -= 6;
   0F0D 21r01r00           3150 	ld	hl, #_THIS + 1
   0F10 2B                 3151 	dec	hl
   0F11 4E                 3152 	ld	c, (hl)
   0F12 23                 3153 	inc	hl
   0F13 46                 3154 	ld	b, (hl)
   0F14 21 0A 00           3155 	ld	hl, #0x000a
   0F17 09                 3156 	add	hl, bc
   0F18 33                 3157 	inc	sp
   0F19 33                 3158 	inc	sp
   0F1A E5                 3159 	push	hl
   0F1B D1                 3160 	pop	de
   0F1C D5                 3161 	push	de
   0F1D 1A                 3162 	ld	a,(de)
   0F1E 4F                 3163 	ld	c, a
   0F1F 13                 3164 	inc	de
   0F20 1A                 3165 	ld	a,(de)
   0F21 47                 3166 	ld	b, a
   0F22 79                 3167 	ld	a, c
   0F23 C6 FA              3168 	add	a, #0xfa
   0F25 4F                 3169 	ld	c, a
   0F26 78                 3170 	ld	a, b
   0F27 CE FF              3171 	adc	a, #0xff
   0F29 47                 3172 	ld	b, a
   0F2A E1                 3173 	pop	hl
   0F2B E5                 3174 	push	hl
   0F2C 71                 3175 	ld	(hl), c
   0F2D 23                 3176 	inc	hl
   0F2E 70                 3177 	ld	(hl), b
                           3178 ;SpritePlayer.c:497: SetSpriteAnim(THIS, anim_hit, 32u);
   0F2F 3E 20              3179 	ld	a, #0x20
   0F31 F5                 3180 	push	af
   0F32 33                 3181 	inc	sp
   0F33 21r6Cr00           3182 	ld	hl, #_anim_hit
   0F36 E5                 3183 	push	hl
   0F37 21r00r00           3184 	ld	hl, #_THIS
   0F3A 2A                 3185 	ld	a, (hl+)
   0F3B 66                 3186 	ld	h, (hl)
   0F3C 6F                 3187 	ld	l, a
   0F3D E5                 3188 	push	hl
   0F3E CDr00r00           3189 	call	_SetSpriteAnim
   0F41 E8 05              3190 	add	sp, #5
                           3191 ;SpritePlayer.c:498: NR50_REG = 0x55; //Max volume
   0F43 3E 55              3192 	ld	a, #0x55
   0F45 E0r00              3193 	ldh	(_NR50_REG+0),a
                           3194 ;SpritePlayer.c:499: PlayFx(CHANNEL_1, 2, 0x4c, 0x81, 0x43, 0x73, 0x86);
   0F47 21 86 00           3195 	ld	hl, #0x0086
   0F4A E5                 3196 	push	hl
   0F4B 2E 73              3197 	ld	l, #0x73
   0F4D E5                 3198 	push	hl
   0F4E 2E 43              3199 	ld	l, #0x43
   0F50 E5                 3200 	push	hl
   0F51 2E 81              3201 	ld	l, #0x81
   0F53 E5                 3202 	push	hl
   0F54 2E 4C              3203 	ld	l, #0x4c
   0F56 E5                 3204 	push	hl
   0F57 3E 02              3205 	ld	a, #0x02
   0F59 F5                 3206 	push	af
   0F5A 33                 3207 	inc	sp
   0F5B AF                 3208 	xor	a, a
   0F5C F5                 3209 	push	af
   0F5D 33                 3210 	inc	sp
   0F5E CDr00r00           3211 	call	_PlayFx
   0F61 E8 0C              3212 	add	sp, #12
   0F63                    3213 00103$:
                           3214 ;SpritePlayer.c:501: }
   0F63 E8 02              3215 	add	sp, #2
   0F65 C9                 3216 	ret
                           3217 ;SpritePlayer.c:504: void Destroy_SpritePlayer() {
                           3218 ;	---------------------------------
                           3219 ; Function Destroy_SpritePlayer
                           3220 ; ---------------------------------
   0F66                    3221 _Destroy_SpritePlayer::
                           3222 ;SpritePlayer.c:506: }
   0F66 C9                 3223 	ret
                           3224 	.area _CODE_2
                           3225 	.area _CABS (ABS)
